@charset "UTF-8";
/***
 * Utilities
 *
 * Reusable functions, mixins, and helper classes.  Things like colors, vertical rhythm, and the .clear-fix helper are in this group.
 * > This directory of partials is also important because weâ€™ll need to define global classes, mixins and styles that can be used anywhere and at any time.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
.clear-fix::after, .ag-section::after {
	content: '';
	display: table;
	clear: both; }

/*
* Hide only visually, but have it available for screen readers:
* http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
*/
.visuallyhidden {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	/*
  * Extends the .visuallyhidden class to allow the element
  * to be focusable when navigated to via the keyboard:
  * https://www.drupal.org/node/897638
  */ }
	.visuallyhidden.focusable:focus, .visuallyhidden.focusable:active {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto; }

*, *::before, *::after {
	box-sizing: inherit; }

/**
 * Settings
 *
 * Global settings and variables. This defines global site wide things like
 * colors and fonts.
 */
/***
 * Quarks
 *
 * Element level styles meant to apply globally.  These define what elements look like if no class is applied to them.  Effectively our site specific _normalize.css_.
 * > Note that these files contain only the default styles for these elements, not modified elements. For example, if we have a table that looks and works entirely differently from the default tables used throughout the website, it would not be a quark.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
html {
	padding: 0;
	margin: 0;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale; }

body {
	font-family: "Open Sans", "Helvetica", "Arial", sans-serif;
	font-size: 1rem;
	line-height: 2rem;
	font-weight: 300;
	margin: 0;
	padding: 0;
	background: #fff;
	color: #333; }

h1, .h1 {
	font-size: 2.625rem;
	line-height: 3rem;
	margin: 4rem auto 3rem; }
	@media only screen and (min-width: 45.625em) {
		h1, .h1 {
			font-size: 4.5rem;
			line-height: 5rem; } }

h2, .h2 {
	font-size: 2rem;
	line-height: 2rem;
	margin: 3rem auto 2rem; }
	@media only screen and (min-width: 45.625em) {
		h2, .h2 {
			font-size: 3rem;
			line-height: 4rem; } }

h3, .h3 {
	font-size: 1.5rem;
	line-height: 2rem;
	margin: 2rem auto 1rem; }
	@media only screen and (min-width: 45.625em) {
		h3, .h3 {
			font-size: 1.875rem; } }

h4, .h4 {
	font-size: 1.25rem;
	line-height: 2rem;
	margin: 1rem auto; }
	@media only screen and (min-width: 45.625em) {
		h4, .h4 {
			font-size: 1.5rem; } }

p {
	margin: 1rem auto; }

strong {
	font-weight: 700; }

a {
	color: #046C6F;
	transition: color 0.15s;
	text-decoration: none;
	font-weight: 600; }
	a:hover {
		color: #11c1c4; }

img {
	display: inline-block;
	max-width: 100%;
	border: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
	overflow: hidden; }

[src$='svg'] {
	width: auto;
	height: auto; }

hr {
	display: block;
	width: auto;
	margin: 3rem 3rem;
	border: none;
	height: 1px;
	background: #fff; }
	@media only screen and (min-width: 45.625em) {
		hr {
			margin: 3rem 6rem; } }

ul {
	margin: 2rem 0;
	padding-left: 2rem; }

li {
	margin: 1rem 0; }

/***
 * Atoms
 *
 * These are the smallest level of styles that merit a class.  Examples are buttons, icons, and text variations like disclaimers.
 * > The styles in an atom should almost never be attached to an HTML element itself; we might not be able to guarantee what the markup will look like in the future. Specifying a class instead is always safer.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 *  Color Swatch
 *
 *  The swatch samples near the beginning of the guide.
 *
 *  html:
 *    <div class="ag-swatch {{ modifier }}">
 *      <span class="ag-swatch__var-name">$color-name</span>
 *      <span class="ag-swatch__value">#abcdef</span>
 *    </div>
 *
 *  @default .ag-swatch--light
 *  @modifier .ag-swatch--dark
 */
.ag-swatch {
	box-sizing: border-box;
	float: left;
	min-height: 1px;
	width: 50%;
	margin-left: 0;
	margin-right: 0;
	height: 6rem; }
	@media only screen and (min-width: 45.625em) {
		.ag-swatch {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: 33.33333%;
			margin-left: 0;
			margin-right: 0; } }
	@media only screen and (min-width: 60em) {
		.ag-swatch {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: 25%;
			margin-left: 0;
			margin-right: 0;
			height: 9rem; } }
	.ag-swatch--dark {
		color: #fff; }

/***
 * Molecules
 *
 * Structures which combine multiple elements to create a coherent piece. A masthead with an image and headline, or a nav dropdown containing numerous links, for example.
 * > This is where we can combine multiple quarks and atoms, without interfering with any of our global styles.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 *  Section
 *
 *  The main sections of the guide.  Modifiers would define variations.
 *
 *  html:
 *    <section class="ag-section {{ modifier }}">
 *      <header class="ag-section__header">
 *        <h4>This is a Section</h4>
 *      </header>
 *      <div class="ag-section__description"><p>The info here is <em>super</em> important!</p></div>
 *    </section>
 */

/*# sourceMappingURL=data:application/json;base64, */
