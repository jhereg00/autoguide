@charset "UTF-8";
/***
 * Utilities
 *
 * Reusable functions, mixins, and helper classes.  Things like colors, vertical rhythm, and the .clear-fix helper are in this group.
 * > This directory of partials is also important because we’ll need to define global classes, mixins and styles that can be used anywhere and at any time.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
@font-face {
	font-family: "icons";
	src: url("../fonts/icons.eot");
	src: url("../fonts/icons.eot?#iefix") format("eot"), url("../fonts/icons.woff2") format("woff2"), url("../fonts/icons.woff") format("woff"), url("../fonts/icons.ttf") format("truetype"), url("../fonts/icons.svg#icons") format("svg"); }

.icon-atoms:before, .icon-colors:before, .icon-copy:before, .icon-desktop:before, .icon-fonts:before, .icon-menu:before, .icon-molecules:before, .icon-organisms:before, .icon-phone:before, .icon-quarks:before, .icon-settings:before, .icon-tablet:before, .icon-utilities:before, [data-copy]:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--colors:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--fonts:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--quarks:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--atoms:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--molecules:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--organisms:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--settings:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--utilities:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--menu:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--phone:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--table:before, .ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--desktop:before, .ag-nav-main__opener:before, .ag-controls__opener:before, .ag-controls__button--phone:before, .ag-controls__button--tablet:before, .ag-controls__button--desktop:before, .section__title:before, .section__title--colors:before, .section__title--fonts:before, .section__title--quarks:before, .section__title--atoms:before, .section__title--molecules:before, .section__title--organisms:before, .section__title--settings:before, .section__title--utilities:before, .section__title--menu:before, .section__title--phone:before, .section__title--table:before, .section__title--desktop:before {
	font-family: "icons";
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	font-style: normal;
	font-variant: normal;
	font-weight: normal;
	text-decoration: none;
	text-transform: none; }

.icon-atoms:before {
	content: ""; }

.icon-colors:before {
	content: ""; }

.icon-copy:before {
	content: ""; }

.icon-desktop:before {
	content: ""; }

.icon-fonts:before {
	content: ""; }

.icon-menu:before {
	content: ""; }

.icon-molecules:before {
	content: ""; }

.icon-organisms:before {
	content: ""; }

.icon-phone:before {
	content: ""; }

.icon-quarks:before {
	content: ""; }

.icon-settings:before {
	content: ""; }

.icon-tablet:before {
	content: ""; }

.icon-utilities:before {
	content: ""; }

/***
 * Strip Units
 *
 * Strips the units from a number
 *
 * code:
 *   stripUnits($number);
 *
 * @param $number - value to strip the units from.
 */
/***
 * Pixels to Rems function
 *
 * Converts pixels to REMs so we can keep our units consistent.  Assumes 1rem is 16px (default for most browsers).
 *
 * code:
 *   pxToRem($px[,$baseRem]);
 *
 * @param $px - unitless integer to convert to rems
 * @param $baseRem - pixels to count as one rem. Defaults to 16
 */
/***
 * Pixels to Ems function
 *
 * Converts pixels to EMs so we can keep our units consistent.  Assumes 1em is 16px, or you can pass a different base.
 *
 * code:
 *   pxToEm($px[,$base]);
 *
 * @param $px - unitless integer to convert to rems
 * @param $base - pixels to count as one em. Defaults to 16
 */
/***
 * Square Root Function
 *
 * Gets the square root of a number (within a margin of error)
 *
 * Useful for diagonal/Pythagorean stuff.
 *
 * code:
 *   sqrt($num)
 *
 * @param $num - number to get square root of
 */
/***
 * Power / Exponent Function
 *
 * Raises a number to a certain power. Supports integers and .5s as the exponent.
 *
 * Useful for diagonal/Pythagorean stuff.
 *
 * code:
 *   pow($base, $exponent)
 *
 * @param $base - number to get square root of
 * @param $exponent - exponent to raise the base number to
 */
/***
 * Modular Scale Function
 *
 * Determines a size from a base, multiple, and scale factor.
 *
 * scss:
 *   font-size: modularScale(16, 3, 1.5); // 36
 */
/***
 * Aspect Ratio
 *
 * Gets padding for correct aspect ratio, and sets height to 0.
 *
 * code:
 *   @include aspect-ratio($width, $height)
 *
 * @param {Number} $width - comparative width of the ratio. The 'x' in x:y
 * @param {Number} $height - comparative height of the ratio. The 'y' in x:y
 */
/***
 * Quantity Query
 *
 * Mixins to allow styles to be set based on at-least, at-most, and exactly `n`
 * number of an element.
 *
 * code:
 *   @include qqAtLeast ($n) {
 *     @content;
 *   }
 *  
 *   @include qqAtMost ($n) {
 *     @content;
 *   }
 *  
 *   @include qqExactly ($n) {
 *     @content;
 *   }
 *
 * @param $n - how many elements to query against
 * @param @content - the styles to apply to it
 */
/***
 * Mod Query
 *
 * A damn clever way to select elements when the number of children is divisible
 * by a given integer. As opposed to the absolute [Quantity Query](#/utilities/mixins/quantity-query),
 * this selects when `children % n = 0`, or if a remainder is also passed, when
 * `children % n = remainder`.
 *
 * Gleefully stolen from Patrick Clancey's article: http://alistapart.com/article/using-css-mod-queries-with-range-selectors
 *
 * scss:
 *   @include selectRange(5,9) {
 *     // things you want only items 5 - 9 to do
 *   }
 *   @include modQuery(3, 0, '.custom-selector') {
 *     // things you want all .custom-selectors in a given parent to do
 *     // when their total number is divisible by 3
 *   }
 *   @include modFirst(3, 1) {
 *     // things you want the first element to do when the total number of
 *     // children matches n % 3 == 1
 *   }
 */
/***
 * Media Queries
 *
 * Defines our default breakpoints.  Assumes mobile-first code, but supports not
 * by passing your breakpoint to the alternate mixin: `mq-lt`. Don't worry about
 * having a ton of these, since the minification process will combine them.
 *
 * There's also a separate mixin each for `portrait` and `landscape` orientations.
 *
 * code:
 *   @include mq($breakpoint) {
 *     @content;
 *   }
 *   @include portrait {
 *     @content;
 *   }
 *   @include landscape {
 *     @content;
 *   }
 *
 * @param $breakpoint - what size you'd like to target larger than. A few have been pre-defined.
 * @param @content - the content to put in the media query
 */
/***
 *  Clear Fix
 *
 *  Clears all floats inside this element by using the `::after` pseudo-element.
 *
 *  code:
 *    @include clear-fix;
 *    // or
 *    @extend %clear-fix;
 */
.section::after, .section__inner::after, .component::after, .palette::after {
	content: '';
	display: table;
	clear: both; }

/***
 * Grid
 *
 * Our super simple custom grid system. Just include the mixin `gridContainer`
 * to set max-width = $max-width + $gutter. For internal stuff, use
 * `subgridContainer` to automatically offset the margins on the container if
 * needed, and `colspan` on the actual column.  By default, assumes 12 columns
 * and a 2 * $wr gutter, but those can be overridden for more complex layouts.
 * It spits out styles wherever it is called, so you can define different
 * columns or even entirely different grids within media queries.
 *
 * There's also a colpush mixin to shift an element to the right by a number of columns.
 *
 * Remember, variables wrapped in `[]` in the example are optional.
 *
 * code:
 *   @include gridContainer ([$gutter]);
 *   @include subgridContainer ([$gutter]);
 *   @include colspan ($span[, $total[, $gutter]]);
 *   @include colpush ($span[, $total[, $gutter]]);
 *
 * @param {int} $span - number of columns to span
 * @param {int} $total - number of total columns the grid has
 * @param {number w/ unit} $gutter - width of the gutters between columns
 */
/*
* Hide only visually, but have it available for screen readers:
* http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
*/
.visuallyhidden, .toggle__checkbox {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	/*
  * Extends the .visuallyhidden class to allow the element
  * to be focusable when navigated to via the keyboard:
  * https://www.drupal.org/node/897638
  */ }
	.visuallyhidden.focusable:focus, .visuallyhidden.focusable:active, .focusable.toggle__checkbox:focus, .focusable.toggle__checkbox:active {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto; }

*, *::before, *::after {
	box-sizing: inherit; }

/**
 * Settings
 *
 * Global settings and variables. This defines global site wide things like
 * colors and fonts.
 */
/***
 * Visual Rhythm
 *
 * Variables to maintain a standard visual rhythm both vertically and horizontally.
 *
 * Also, there's a function for returning the next multiple of vertical rhythm
 * above a given number.
 *
 * @param {Number} $base - number to find next multiple above.
 * @param {optional, Number} $rhythm - number that's multiplied until it's larger than `$base`. Equal to `$vr` if omitted.
 *
 * scss:
 *   line-height: multipleAbove(30, 14); // 3;
 */
/***
 * Colors
 *
 * These colors define the look of the guide itself, _not_ anything within the examples.
 *
 * path: .
 */
/***
 * Primary Palette
 *
 * The main colors used for the Autoguide template.  By default, these colors get
 * reused for the more detailed palette.
 *
 * Note to learners: these variable names are less than stellar.  They're kept
 * intentionally vague, because of their wide application.
 *
 * path: ./colors
 * order: 0
 * template: color
 */
/***
 * Detailed Palette
 *
 * These are the colors that will actually appear throughout the generated guide.
 * Altering these will grant a very fine level of control over components.
 *
 * The colors titled `$background-*` are used directly as the background property
 * for their given element, so you can replace them with anything that could apply
 * there.  For example: `$background-header: url(https://morbotron.com/img/S03E06/1053451.jpg) center center no-repeat cover`.
 *
 * path: ./colors
 * order: 1
 * template: color
 */
/***
 * Code Colors
 *
 * These are the color variables that can be overridden for code blocks.
 *
 * template: color
 * path: ./molecules/code-block
 */
/***
 *  Type Scale mixins
 *
 *  Created using a modular scale. Factor is 1.4. This means, starting at a base
 *  of `20px`, the next size up (`h3`) is `20 * 1.4 = 28`. To simplify this, the
 *  math is handled by the [`modularScale`](#/utilities/functions/modularScale)
 *  function.
 *
 *  Additionally, `h4` splits between body and `h3`, while `small` is an
 *  arbitrary size.
 *
 *  scss:
 *    @include h1;
 *    @include h2;
 *    @include h3;
 *    @include h4;
 *    @include body;
 *    @include small;
 */
/***
 * Quarks
 *
 * Element level styles meant to apply globally.  These define what elements look like if no class is applied to them.  Effectively our site specific _normalize.css_.
 * > Note that these files contain only the default styles for these elements, not modified elements. For example, if we have a table that looks and works entirely differently from the default tables used throughout the website, it would not be a quark.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
html {
	padding: 0;
	margin: 0;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale; }

body {
	font-family: "Lato", sans-serif;
	font-size: 1.25rem;
	line-height: 2rem;
	font-weight: 300;
	margin: 0;
	padding: 0;
	background: #fff;
	color: #333; }

/***
 * Typography
 *
 * Default text styles.
 *
 * html:
 *   <h1>Heading Level 1</h1>
 *   <h2>Heading Level 2</h2>
 *   <h3>Heading Level 3</h3>
 *   <h4>Heading Level 4</h4>
 *   <p>Unde quo, minus eaque eligendi cum tempore, nulla, accusamus est labore tenetur modi eveniet obcaecati voluptas eius vitae vero dolorem nobis culpa nihil. Itaque saepe suscipit odit fugit quidem culpa.</p>
 *   <p>Accusantium recusandae, dignissimos rerum quaerat voluptatem quis itaque deleniti sequi autem explicabo dolore delectus, doloremque eos. Accusantium<sup>sup</sup> recusandae<sub>sub</sub> eius, debitis voluptates adipisci aspernatur rem voluptatum, delectus, tempore accusantium dolorum cumque error.</p>
 */
h1, .h1 {
	font-size: 3.43rem;
	line-height: 4rem;
	font-family: "Droid Serif", serif;
	weight: 400;
	margin: 0; }

h2, .h2 {
	font-size: 2.45rem;
	line-height: 3rem;
	font-family: "Droid Serif", serif;
	weight: 400;
	margin: 0; }

h3, .h3 {
	font-size: 1.75rem;
	line-height: 2rem;
	font-family: "Droid Serif", serif;
	weight: 400;
	margin: 0; }

h4, .h4 {
	font-size: 1.47903rem;
	line-height: 2rem;
	font-family: "Droid Serif", serif;
	weight: 400;
	margin: 0; }

h5, .h5, h6, .h6 {
	font-size: 1.25rem;
	line-height: 2rem;
	font-family: "Droid Serif", serif;
	weight: 400;
	margin: 1rem 0 0; }

p {
	margin: 1rem auto; }

strong {
	font-weight: 700; }

em {
	font-style: italic; }

/***
 * Links
 *
 * html:
 *   <a href="#">Simple Default Link</a>
 */
a {
	color: #046C6F;
	transition: color 0.15s;
	text-decoration: none;
	font-weight: 600; }
	a:hover {
		color: #11c1c4; }

/**
 *  Image Resets
 */
img {
	display: inline-block;
	max-width: 100%;
	border: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
	overflow: hidden; }

[src$='svg'] {
	width: auto;
	height: auto; }

/***
 * Horizontal Rule
 *
 * html:
 *   <hr>
 */
hr {
	display: block;
	width: auto;
	margin: 3rem 3rem;
	border: none;
	height: 1px;
	background: #e9eaf0; }
	@media only screen and (min-width: 45.625em) {
		hr {
			margin: 3rem 6rem; } }

/***
 *  Lists
 *
 *  html:
 *    <ul>
 *      <li>Lorem ipsum dolor sit amet</li>
 *      <li>Minima recusandae adipisci quidem</li>
 *      <li>Amet eum non animi soluta</li>
 *      <li>Saepe commodi nesciunt quaerat quae minima</li>
 *    </ul>
 *    <ol>
 *      <li>Lorem ipsum dolor sit amet</li>
 *      <li>Minima recusandae adipisci quidem</li>
 *      <li>Amet eum non animi soluta</li>
 *      <li>Saepe commodi nesciunt quaerat quae minima</li>
 *    </ol>
 */
ul, ol {
	margin: 2rem 0;
	padding-left: 2rem; }

li {
	margin: 1rem 0; }

/***
 * Blockquote
 *
 * Inset with a left border.
 *
 * html:
 *   <blockquote>
 *     <p>"Some content that's a quote."</p>
 *   </blockquote>
 */
blockquote {
	margin: 1rem 0;
	padding: 0 0 0 0.75rem;
	border-left: 0.25rem solid #e9eaf0; }

/***
 * Table
 *
 * html:
 *   <table>
 *     <tr>
 *       <th>Lorem</th>
 *       <td>Ipsum</td>
 *       <td>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Esse
 *          perspiciatis vitae sunt, magnam blanditiis unde velit quis perferendis
 *          iure ut excepturi tempora eos autem accusamus amet et, non? Distinctio,
 *          eaque.</td>
 *     </tr>
 *     <tr>
 *       <th>Sit</th>
 *       <td>Amet</td>
 *       <td>Lorem</td>
 *     </tr>
 *     <tr>
 *       <th>Ipsum</th>
 *       <td>Dolor</td>
 *       <td>Sit</td>
 *     </tr>
 *   </table>
 */
table {
	display: table;
	width: 100%;
	box-sizing: border-box;
	border-collapse: collapse; }

tr {
	border-top: 1px solid #e9eaf0;
	border-bottom: 1px solid #e9eaf0; }

th, td {
	text-align: left;
	padding: 0.5rem 1rem;
	vertical-align: top; }
	@media only screen and (max-width: 45.615em) {
		th, td {
			display: block; } }

/***
 *  Code
 *
 *  `<code>` elements. Uses `$font-mono`.
 *
 *  html:
 *    <code>this.is_some("code")</code>
 */
code {
	font-family: "Source Code Pro", monospace; }

/***
 * Atoms
 *
 * These are the smallest level of styles that merit a class.  Examples are buttons, icons, and text variations like disclaimers.
 * > The styles in an atom should almost never be attached to an HTML element itself; we might not be able to guarantee what the markup will look like in the future. Specifying a class instead is always safer.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 *  File Path
 *
 *  Light text showing where to find the element being described.
 *
 *  html:
 *    <p class="file-path">./dev/scss/super/_awesome-file.scss</p>
 */
.file-path {
	font-size: 0.875rem;
	line-height: 1rem;
	font-family: "Source Code Pro", monospace;
	margin: 0;
	color: rgba(51, 51, 51, 0.5); }

/***
 *  Color Swatch
 *
 *  Just a big block of color.
 *
 *  html:
 *    <div class="swatch"></div>
 *
 *  @default .swatch--light
 */
.swatch {
	min-height: 8rem;
	background: #046C6F; }

/***
 *  Font Sample
 *
 *  Shows the first font found in the font stack of variables in a file named fonts.scss.
 *
 *  html:
 *    <div class="ag-font">
 *      <span class="ag-font__var-name">$my-font</span>
 *      <span class="ag-font__value" style="font-family: 'Times New Roman', serif;">
 *        Times New Roman
 *      </span>
 *    </div>
 */
.ag-font {
	box-sizing: border-box;
	float: left;
	min-height: 1px;
	width: calc(100% - 2rem);
	margin-left: 1rem;
	margin-right: 1rem;
	margin: 2rem auto; }
	@media only screen and (min-width: 45.625em) {
		.ag-font {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: calc(50% - 2rem);
			margin-left: 1rem;
			margin-right: 1rem; }
			.ag-font:nth-child(2n) {
				clear: left; } }

.ag-font__var-name {
	font-family: "Source Code Pro", monospace;
	display: block; }

.ag-font__value {
	font-size: 2.45rem;
	line-height: 3rem; }

/***
 *  Description
 *
 *  Container for the output of the markdown description for each element.
 *
 *  html:
 *    <div class="ag-description">
 *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Est non eum sit qui cum veniam optio deserunt, perspiciatis id eligendi sequi facere illum ad nobis soluta assumenda natus beatae molestiae.</p>
 *    </div>
 */
.ag-description {
	max-width: 52.125rem; }
	.ag-component-header + .ag-description > :first-child {
		margin-top: 0; }

/***
 *  Button
 *
 *  Basic button, and its variations.
 *
 *  @modifier .button--small
 *
 *  html:
 *    <a class="button">Click Here, Dummy</a>
 *
 *  template: html
 */
.button, .toggle__button {
	font-size: 1.25rem;
	line-height: 2rem;
	position: relative;
	display: inline-block;
	padding: 0.5rem 1rem;
	border: 1px solid #046C6F;
	border-radius: 0.25rem;
	cursor: pointer;
	transition: all .3s;
	color: #046C6F;
	background: #fff; }
	.button:hover, .toggle__button:hover {
		border-color: #11c1c4;
		box-shadow: inset 0 0 1rem rgba(4, 108, 111, 0.25);
		color: #11c1c4; }

.button--small {
	font-size: 0.875rem;
	line-height: 1rem;
	padding: 0.25rem 0.5rem; }

/***
 *  Toggle
 *
 *  A button that stays active based on a hidden checkbox. Class extends
 *  [button](#/atoms/button).
 *
 *  html:
 *    <div class="toggle">
 *      <input type="checkbox" id="sample" class="toggle__checkbox">
 *      <label for="sample" class="toggle__button">I Toggle</label>
 *    </div>
 */
.toggle__checkbox:checked ~ .toggle__button {
	background: #11c1c4;
	color: #333; }

/***
 * Copyable element
 *
 * Element that, when clicked, copies a string to the user's clipboard.
 *
 * html:
 *   <span data-copy="Copy Me!">Click to "Copy Me"</span>
 */
[data-copy] {
	cursor: copy; }
	[data-copy]:before {
		content: ""; }
	[data-copy]::before {
		display: inline-block;
		padding-right: .25em;
		vertical-align: bottom;
		opacity: 0;
		transform: translateX(50%);
		transition: opacity 0.15s linear, transform 0.15s ease-in; }
	[data-copy]:hover::before {
		opacity: 1;
		transform: none;
		transition-timing-function: ease-out; }
	[data-copy]:active::before {
		transform: translateY(-15%);
		transition-duration: 0s; }

/***
 * Molecules
 *
 * Structures which combine multiple elements to create a coherent piece. A header with an image and headline, or a nav dropdown containing numerous links, for example.
 * > This is where we can combine multiple quarks and atoms, without interfering with any of our global styles.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 *  Parameter Description
 *
 *  Describes a parameter included using `@param {type} name - description`.
 *
 *  html:
 *    <div class="ag-param">
 *      <span class="ag-param__type">object</span>
 *      <span class="ag-param__name">myVar</span>
 *      <div class="ag-param__description ag-description">Makes the function do something awesome.</div>
 *    </div>
 */
.ag-param {
	padding-left: 1rem; }
	.ag-param + .ag-param {
		margin-top: 1rem; }
	.ag-param .ag-param {
		padding-left: 2rem; }

.ag-param__type {
	font-family: "Source Code Pro", monospace;
	color: rgba(51, 51, 51, 0.5);
	margin-right: 1rem; }

.ag-param__name {
	font-family: "Source Code Pro", monospace;
	font-weight: 700; }

.ag-param__description {
	padding-left: 1rem; }
	.ag-param__description > :first-child {
		margin-top: 0; }
	.ag-param__description > :last-child {
		margin-bottom: 0; }

/***
 *  Main Nav
 *
 *  html:
 *    <nav class="ag-nav-main ag-tray__tier open">
 *      <a class="ag-nav-main__opener ag-tray__tier-opener"><span class="visuallyhidden">Open Controls</span></a>
 *      <ul class="ag-nav-main__list">
 *        <li class="ag-nav-main__item"><a class="ag-nav-main__link" href="#/colors">Colors</a></li>
 *        <li class="ag-nav-main__item"><a class="ag-nav-main__link" href="#/fonts">Fonts</a></li>
 *        <li class="ag-nav-main__item">
 *          <a href="#/quarks" class="ag-nav-main__link">Quarks</a>
 *          <ul class="ag-nav-main__subnav">
 *            <li class="ag-nav-main__item">
 *              <a href="#/quarks/blockquote" class="ag-nav-main__link">Blockquote</a>
 *            </li>
 *            <li class="ag-nav-main__item">
 *              <a href="#/quarks/code" class="ag-nav-main__link">Code</a>
 *            </li>
 *          </ul>
 *        </li>
 *        <li class="ag-nav-main__item">
 *          <a href="#/atoms" class="ag-nav-main__link">Atoms</a>
 *        </li>
 *      </ul>
 *    </nav>
 */
.ag-nav-main.ag-tray__tier {
	padding: 0 1rem; }

.ag-nav-main__list {
	margin: 0;
	padding: 1rem 0;
	list-style-type: none;
	max-height: 100%;
	overflow: auto;
	overflow: -moz-scrollbars-none; }
	.ag-nav-main__list::-webkit-scrollbar {
		display: none; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--colors:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--fonts:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--quarks:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--atoms:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--molecules:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--organisms:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--settings:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--utilities:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--menu:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--phone:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--table:before {
		content: ""; }
	.ag-nav-main__list > .ag-nav-main__item > .ag-nav-main__link--desktop:before {
		content: ""; }

.ag-nav-main__item {
	margin: 0; }

.ag-nav-main__subnav {
	margin: 0;
	padding: 0;
	list-style-type: none; }
	.ag-nav-main__subnav .ag-nav-main__link {
		padding-left: 3rem; }
	.ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__link {
		padding-left: 4rem; }
	.ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__link {
		padding-left: 5rem; }
	.ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__link {
		padding-left: 6rem; }
	.ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__link {
		padding-left: 7rem; }

.ag-nav-main__link {
	display: block;
	position: relative;
	padding-left: 2rem; }
	.ag-nav-main__link::before {
		position: absolute;
		left: 0;
		margin-right: 0.5rem;
		vertical-align: top; }

.ag-nav-main__opener:before {
	content: ""; }

/***
 *  Controls
 *
 *  Buttons that handle certain guide-level features.
 *
 *  html:
 *    <div class="ag-controls ag-tray__tier open">
 *      <a class="ag-controls__opener ag-tray__tier-opener"><span class="visuallyhidden">Open Controls</span></a>
 *      <div class="ag-controls__group ag-controls__group--sample-size">
 *        <h4 class="ag-controls__group-header">Sample Size</h4>
 *        <div class="toggle">
 *          <input type="radio" name="sampleSize" id="sampleSizeMobile" value="320" class="toggle__checkbox">
 *          <label for="sampleSizeMobile" class="toggle__button button--small ag-controls__button ag-controls__button--sample-size ag-controls__button--phone"><span class="visuallyhidden">Mobile</span></a>
 *        </div>
 *        <div class="toggle">
 *          <input type="radio" name="sampleSize" id="sampleSizeTablet" value="800" class="toggle__checkbox">
 *          <label for="sampleSizeTablet" class="toggle__button button--small ag-controls__button ag-controls__button--sample-size ag-controls__button--tablet"><span class="visuallyhidden">Tablet (Nexus 10)</span></a>
 *        </div>
 *        <div class="toggle">
 *          <input type="radio" name="sampleSize" id="sampleSizeDesktop" value="" class="toggle__checkbox" checked>
 *          <label for="sampleSizeDesktop" class="toggle__button button--small ag-controls__button ag-controls__button--sample-size ag-controls__button--desktop"><span class="visuallyhidden">Desktop</span></a>
 *        </div>
 *      </div>
 *      <div class="ag-controls__group">
 *        <h4 class="ag-controls__group-header">Features</h4>
 *        <div class="toggle">
 *          <input type="checkbox" id="showGrids" class="toggle__checkbox">
 *          <label for="showGrids" class="toggle__button button--small ag-controls__button">Show Grid</label>
 *        </div>
 *        <div class="toggle">
 *          <input type="checkbox" id="showDev" class="toggle__checkbox" checked="">
 *          <label for="showDev" class="toggle__button button--small ag-controls__button">Show Code Sections</label>
 *        </div>
 *      </div>
 *    </div>
 */
.ag-controls__opener:before {
	content: ""; }

.ag-controls__group + .ag-controls__group {
	margin-top: 2rem; }

.ag-controls__group--sample-size .toggle {
	display: inline-block; }

.ag-controls__button--sample-size {
	font-size: 1.5em; }

.ag-controls__button--phone:before {
	content: ""; }

.ag-controls__button--tablet:before {
	content: ""; }

.ag-controls__button--desktop:before {
	content: ""; }

.ag-controls__button {
	display: block;
	margin-top: 0.5rem; }

/***
 * Color Sample
 *
 * A swatch and variable name + color value combo molecule. JS also makes the
 * variable name and value copyable with a click.
 *
 * @default .color--light
 * @modifier .color--dark - when a color's luminosity is < 55%.
 *
 * html:
 *   <div class="color">
 *     <div class="swatch" style="background-color: #f13b0c;"></div>
 *     <div class="color__details">
 *       <span class="color__var-name js-copyable" data-copy="$my-color">$my-color</span>
 *       <span class="color__value js-copyable" data-copy="#F13B0C">#F13B0C</span>
 *     </div>
 *   </div>
 */
.color {
	position: relative; }
	.color .swatch {
		width: 100%;
		height: 100%; }
	.color__details {
		position: absolute;
		right: 0;
		bottom: 0;
		left: 0;
		padding: 1rem 1rem;
		text-align: right; }
	.color__var-name {
		font-family: "Source Code Pro", monospace;
		display: block; }
	.color__value {
		display: block; }
	.color--dark {
		color: white; }

.hljs-comment {
	color: rgba(51, 51, 51, 0.5);
	font-style: italic; }

.hljs-quote {
	color: rgba(51, 51, 51, 0.5);
	font-style: italic; }

.hljs-keyword {
	color: #333;
	font-weight: bold; }

.hljs-selector-tag {
	color: #333;
	font-weight: bold; }

.hljs-subst {
	color: #333; }

.hljs-number {
	color: #11c1c4; }

.hljs-literal {
	color: #11c1c4; }

.hljs-variable {
	color: #11c1c4; }

.hljs-template-variable {
	color: #11c1c4; }

.hljs-tag .hljs-attr {
	color: #11c1c4; }

.hljs-string {
	color: #186cbf; }

.hljs-doctag {
	color: #186cbf; }

.hljs-title {
	color: #14477a;
	font-weight: bold; }

.hljs-section {
	color: #14477a;
	font-weight: bold; }

.hljs-selector-id {
	color: #14477a;
	font-weight: bold; }

.hljs-type {
	color: #046C6F;
	font-weight: bold; }

.hljs-class .hljs-title {
	color: #046C6F;
	font-weight: bold; }

.hljs-tag {
	color: #03595b;
	font-weight: normal; }

.hljs-name {
	color: #03595b;
	font-weight: normal; }

.hljs-attribute {
	color: #03595b;
	font-weight: normal; }

.hljs-regexp {
	color: #14477a; }

.hljs-link {
	color: #14477a; }

.hljs-symbol {
	color: #113d68; }

.hljs-bullet {
	color: #113d68; }

.hljs-built_in {
	color: #046C6F; }

.hljs-builtin-name {
	color: #046C6F; }

.hljs-meta {
	color: rgba(51, 51, 51, 0.5);
	font-weight: bold; }

.hljs-deletion {
	background: #fdd; }

.hljs-addition {
	background: #dfd; }

.hljs-emphasis {
	font-style: italic; }

.hljs-strong {
	font-weight: bold; }

/***
 * Code Block
 *
 * A (usually) collapsable block of code. Colors are from a [unique palette](#/molecules/code-block/code-colors).
 * To see how the collapsable part works, check it out in its [JS section](#/app/collapsable).
 *
 * html:
 *   <div class="code-block js-collapsable is-open">
 *     <div class="code-block__header collapsable__toggle js-collapsable-toggle">
 *       <h6>HTML</h6>
 *     </div>
 *     <pre class="code-block__pre collapsable__content js-collapsable-content"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header-main"</span>&gt;</span>
 *     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header-main__title"</span>&gt;</span>Autoguide<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
 *   <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></code></pre>
 *   </div>
 */
.code-block {
	border: 0.25rem solid #e9eaf0; }
	.code-block__header {
		padding: 0 1rem;
		margin: 0; }
		.code-block__header h6 {
			margin: 0; }
	.code-block__pre {
		margin: 0;
		padding: 1rem 1rem;
		background: #e9eaf0;
		color: #333;
		overflow: auto; }

/***
 * Organisms
 *
 * These are big things that combine everything smaller.  An entire form containing molecules of labels with inputs, or the global site header, for example.
 * > Organisms are groups of molecules joined together to form a relatively complex, distinct section of an interface.
 * >
 * >\- http://bradfrost.com/blog/post/atomic-web-design/#organisms
 */
/***
 *  Section
 *
 *  The main sections of the guide.  Modifiers would define variations.
 *
 *  html:
 *    <section class="section {{ modifier }}">
 *      <div class="section__inner">
 *        <header class="section__header">
 *          <h4>This is a Section</h4>
 *        </header>
 *        <div class="section__description"><p>The info here is <em>super</em> important!</p></div>
 *      </div>
 *    </section>
 */
.section {
	margin: 8rem auto;
	position: relative;
	overflow: hidden; }
	.section--depth-1 {
		margin-top: 12rem; }

.section__inner {
	max-width: 65.75rem;
	margin-left: auto;
	margin-right: auto;
	padding: 0 1rem;
	margin: 0 auto;
	box-sizing: border-box; }
	.section--depth-2 .section__inner {
		padding-left: 2rem; }
	.section--depth-3 .section__inner {
		padding-left: 3rem; }
	.section--depth-4 .section__inner {
		padding-left: 4rem; }
	.section--depth-5 .section__inner {
		padding-left: 5rem; }

.section__sub-elements {
	position: relative;
	padding-top: 4rem;
	margin-top: 2rem; }
	.section__sub-elements::before {
		content: '';
		position: absolute;
		top: 0;
		bottom: 0;
		margin: 0 auto;
		width: 63.75rem;
		max-width: 100%;
		border-left: 1px solid #e9eaf0;
		transform: translateX(-50%);
		pointer-events: none; }
	.section__sub-elements > .section:first-child {
		margin-top: 0; }
	.section__sub-elements > .section:last-child {
		margin-bottom: 0; }
	.section__sub-elements .section__title::before {
		display: none; }
	.section--depth-1 .section__sub-elements::before {
		left: calc(50% + 0rem); }
	.section--depth-2 .section__sub-elements::before {
		left: calc(50% + 1rem); }
	.section--depth-3 .section__sub-elements::before {
		left: calc(50% + 2rem); }
	.section--depth-4 .section__sub-elements::before {
		left: calc(50% + 3rem); }
	.section--depth-5 .section__sub-elements::before {
		left: calc(50% + 4rem); }

.section__title {
	position: relative; }
	.section__title::before {
		position: absolute;
		right: 100%;
		top: 0;
		vertical-align: top;
		margin-right: 1rem; }
	.section__title:before {
		content: ""; }

.section__title--colors:before {
	content: ""; }

.section__title--fonts:before {
	content: ""; }

.section__title--quarks:before {
	content: ""; }

.section__title--atoms:before {
	content: ""; }

.section__title--molecules:before {
	content: ""; }

.section__title--organisms:before {
	content: ""; }

.section__title--settings:before {
	content: ""; }

.section__title--utilities:before {
	content: ""; }

.section__title--menu:before {
	content: ""; }

.section__title--phone:before {
	content: ""; }

.section__title--table:before {
	content: ""; }

.section__title--desktop:before {
	content: ""; }

/***
 * Main Header
 *
 * The main header of the styleguide.
 *
 * Makes use of `$background-header` and `$text-header` with the `super` sizing.
 * Background size is set to `cover` in case you want to override `$background-header`
 * with an image.
 *
 * html:
 *   <header class="header-main">
 *     <h1 class="header-main__title">Autoguide</h1>
 *   </header>
 */
.header-main {
	padding: 12rem 2rem 3rem;
	background: #010101;
	background-size: cover; }
	.header-main__inner {
		margin: 0 auto;
		max-width: 63.75rem; }
	.header-main__title {
		font-size: 3.43rem;
		line-height: 4rem;
		font-family: "Droid Serif", serif;
		weight: 400;
		margin: 0;
		color: white; }
		@media only screen and (min-width: 45.625em) {
			.header-main__title {
				font-size: 4.802rem;
				line-height: 5rem; } }

/***
 *  Main Footer
 *
 *  Just a quick signoff.
 *
 *  html:
 *    <footer class="footer-main">
 *      <p>Created using <a href="https://github.com/jhereg00/autoguide" target="_blank">Autoguide</a>.</p>
 *    </footer>
 */
.footer-main {
	font-size: 0.875rem;
	line-height: 1rem;
	padding: 1rem 1rem;
	margin-top: 8rem;
	background: #66676a;
	color: white; }
	.footer-main a {
		text-decoration: underline;
		color: inherit; }

/***
 *  Controls/Nav Tray
 *
 *  A fold-away thingy with tiers that can open/close.
 *
 *  html:
 *    <div class="ag-tray">
 *      <div class="ag-tray__tier">
 *        <a class="ag-tray__tier-opener"></a>
 *        <h4>Tier 1</h4>
 *      </div>
 *      <div class="ag-tray__tier">
 *        <a class="ag-tray__tier-opener"></a>
 *        <h4>Tier 2</h4>
 *      </div>
 *    </div>
 */
.ag-tray {
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	pointer-events: none;
	z-index: 9999999;
	transition: background .3s; }
	.ag-tray.open {
		background: rgba(4, 108, 111, 0.5);
		pointer-events: auto; }
		.ag-tray.open > .ag-tray__tiers-container {
			-webkit-filter: drop-shadow(0 0 0.5rem rgba(4, 108, 111, 0.8));
			        filter: drop-shadow(0 0 0.5rem rgba(4, 108, 111, 0.8)); }

.ag-tray__tier {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	width: 80vw;
	padding: 1rem 1rem;
	box-sizing: border-box;
	background: #e9eaf0;
	pointer-events: auto;
	transform: translateX(100%);
	transition: transform .3s, right .3s;
	z-index: 10; }
	@media only screen and (min-width: 45.625em) {
		.ag-tray__tier {
			width: 33vw; } }
	@media only screen and (min-width: 60em) {
		.ag-tray__tier {
			width: 20vw; } }
	.ag-tray__tier.open {
		transform: none; }
	.ag-tray__tier:nth-child(2) {
		z-index: 8;
		background: #d1d3df; }
		.ag-tray__tier:nth-child(2) .ag-tray__tier-opener {
			top: 2rem; }
	@media only screen and (min-width: 45.625em) {
		.ag-tray__tier.open + .ag-tray__tier {
			right: 33vw; } }
	@media only screen and (min-width: 60em) {
		.ag-tray__tier.open + .ag-tray__tier {
			right: 20vw; } }
	.ag-tray__tier:nth-child(3) {
		z-index: 7;
		background: #b8bccf; }
		.ag-tray__tier:nth-child(3) .ag-tray__tier-opener {
			top: 4rem; }
	@media only screen and (min-width: 45.625em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 66vw; } }
	@media only screen and (min-width: 60em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 40vw; } }
	.ag-tray__tier:nth-child(4) {
		z-index: 6;
		background: #a0a5be; }
		.ag-tray__tier:nth-child(4) .ag-tray__tier-opener {
			top: 6rem; }
	@media only screen and (min-width: 45.625em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 99vw; } }
	@media only screen and (min-width: 60em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 60vw; } }
	.ag-tray__tier:nth-child(5) {
		z-index: 5;
		background: #888dae; }
		.ag-tray__tier:nth-child(5) .ag-tray__tier-opener {
			top: 8rem; }
	@media only screen and (min-width: 45.625em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 132vw; } }
	@media only screen and (min-width: 60em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 80vw; } }

.ag-tray__tier-opener {
	display: block;
	position: absolute;
	top: 0;
	right: 100%;
	width: 2rem;
	height: 2rem;
	background: inherit;
	cursor: pointer;
	color: rgba(51, 51, 51, 0.5);
	transition: color .3s;
	text-align: center;
	font-size: 1.47903rem;
	line-height: 2rem; }
	.ag-tray__tier-opener:hover, .ag-tray__tier.open .ag-tray__tier-opener {
		color: #333; }

/***
 * Component
 *
 * An individual piece of the styleguide.
 *
 * html:
TODO
 */
.component {
	padding: 0 1rem;
	margin: 4rem auto;
	max-width: 63.75rem; }

/***
 * Palette
 *
 * Just a colection of [color](#/molecules/color) elements.  Sizes them mostly
 * based on how many are present.  This is achieved through the utterly ingenious
 * [mod selector](http://alistapart.com/article/using-css-mod-queries-with-range-selectors).
 *
 * Shows the colors as larger if in an element with 'primary' in its title.
 *
 * @modifier [id*="primary"] &
 *
 * html:
 *   <div class="palette">
 *     <div class="color color--dark">
 *       <div class="swatch swatch-- swatch--dark" style="background-color: #FF0000"></div>
 *       <div class="color__details">
 *         <span class="color__var-name" data-copy="$c1">$c1</span>
 *         <span class="color__value color__value--hex" data-copy="#FF0000">#FF0000</span>
 *       </div>
 *     </div>
 *     <div class="color color--dark">
 *       <div class="swatch swatch-- swatch--dark" style="background-color: #EE0000"></div>
 *       <div class="color__details">
 *         <span class="color__var-name" data-copy="$c2">$c2</span>
 *         <span class="color__value color__value--hex" data-copy="#EE0000">#EE0000</span>
 *       </div>
 *     </div>
 *     <div class="color color--dark">
 *       <div class="swatch swatch-- swatch--dark" style="background-color: #DD0000"></div>
 *       <div class="color__details">
 *         <span class="color__var-name" data-copy="$c3">$c3</span>
 *         <span class="color__value color__value--hex" data-copy="#DD0000">#DD0000</span>
 *       </div>
 *     </div>
 *     <div class="color color--dark">
 *       <div class="swatch swatch-- swatch--dark" style="background-color: #CC0000"></div>
 *       <div class="color__details">
 *         <span class="color__var-name" data-copy="$c4">$c4</span>
 *         <span class="color__value color__value--hex" data-copy="#CC0000">#CC0000</span>
 *       </div>
 *     </div>
 *   </div>
 */
.palette {
	max-width: 63.75rem;
	margin-left: auto;
	margin-right: auto; }
	.palette .color {
		float: left;
		width: 33.33333%; }
		.palette .color:nth-last-child(4n+0):first-child,
		.palette .color:nth-last-child(4n+0):first-child ~ .color {
			width: 25%; }
		.palette .color:nth-last-child(4n+3):first-child,
		.palette .color:nth-last-child(4n+3):first-child ~ .color {
			width: 25%; }
			.palette .color:nth-last-child(4n+3):first-child:nth-child(n+1):nth-child(-n+3),
			.palette .color:nth-last-child(4n+3):first-child ~ .color:nth-child(n+1):nth-child(-n+3) {
				width: 33.33333%; }
	[id*="primary"] .palette {
		font-size: 1.47903rem;
		line-height: 2rem; }
		[id*="primary"] .palette .color {
			width: 50%;
			height: 12rem; }
			[id*="primary"] .palette .color:nth-last-child(2n+1):first-child {
				width: 100%; }
			[id*="primary"] .palette .color:nth-last-child(3n+0):first-child,
			[id*="primary"] .palette .color:nth-last-child(3n+0):first-child ~ .color {
				width: 33.33333%; }
			[id*="primary"] .palette .color:nth-last-child(3n+1):first-child,
			[id*="primary"] .palette .color:nth-last-child(3n+1):first-child ~ .color {
				width: 33.33333%; }
			[id*="primary"] .palette .color:nth-last-child(3n+1):first-child {
				width: 100%; }
			[id*="primary"] .palette .color:nth-last-child(2n+0):first-child,
			[id*="primary"] .palette .color:nth-last-child(2n+0):first-child ~ .color {
				width: 50%; }

/***
 * HTML Sample
 *
 * An output of a sample element/component.  It is turned into an iframe by
 * autoguide.js, allowing it to keep all of its styling localized.
 *
 * Title and description are optional based on the passed data.
 *
 * html:
 *   <div class="html-sample">
 *     <h6 class="html-sample__header">A Single Sample</h6>
 *     <div class="html-sample__description">
 *       <p>This is a sample of the sample. Neat, right?</p>
 *       <p>Side note, iframe can't be dynamically generated within dynamically generated iframe. It fucks up.</p>
 *     </div>
 *     <iframe class="html-sample__iframe" srcdoc='
 *       <html>
 *         <head>
 *           <link rel="stylesheet" href="assets/css/autoguide.css">
 *         </head>
 *         <body><h5>This is in an iframe</h5></body>
 *       </html>'>
 *     </iframe>
 *   </div>
 */
.html-sample__header--class-name {
	font-family: "Source Code Pro", monospace; }

.html-sample__description :first-child {
	margin-top: 0; }

.html-sample__iframe {
	border: 0.25rem solid #e9eaf0;
	width: calc(100% - 0.5rem); }

/**
 * outer page container
 */
.page-container {
	overflow: hidden; }

/*# sourceMappingURL=data:application/json;base64, */
