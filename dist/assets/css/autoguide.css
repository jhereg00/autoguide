@charset "UTF-8";
/***
 * Utilities
 *
 * Reusable functions, mixins, and helper classes.  Things like colors, vertical rhythm, and the .clear-fix helper are in this group.
 * > This directory of partials is also important because weâ€™ll need to define global classes, mixins and styles that can be used anywhere and at any time.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 * Aspect Ratio
 *
 * Gets padding for correct aspect ratio, and sets height to 0.
 *
 * code:
 *   @include aspect-ratio($width, $height)
 *
 * @param {Number} $width - comparative width of the ratio. The 'x' in x:y
 * @param {Number} $height - comparative height of the ratio. The 'y' in x:y
 */
/***
 *  Clear Fix
 *
 *  Clears all floats inside this element by using the `::after` pseudo-element.
 *
 *  code:
 *    @include clear-fix;
 *    // or
 *    @extend %clear-fix;
 */
@import 'https://fonts.googleapis.com/css?family=Lato:400,400i,700,700i|Source+Code+Pro:500|Source+Sans+Pro:900';
.ag-section::after {
	content: '';
	display: table;
	clear: both; }

/***
 * Grid
 *
 * Our super simple custom grid system. Just include the mixin `gridContainer`
 * to set max-width = $max-width + $gutter. For internal stuff, use
 * `subgridContainer` to automatically offset the margins on the container if
 * needed, and `colspan` on the actual column.  By default, assumes 12 columns
 * and a 2 * $wr gutter, but those can be overridden for more complex layouts.
 * It spits out styles wherever it is called, so you can define different
 * columns or even entirely different grids within media queries.
 *
 * There's also a colpush mixin to shift an element to the right by a number of columns.
 *
 * Remember, variables wrapped in `[]` in the example are optional.
 *
 * code:
 *   @include gridContainer ([$gutter]);
 *   @include subgridContainer ([$gutter]);
 *   @include colspan ($span[, $total[, $gutter]]);
 *   @include colpush ($span[, $total[, $gutter]]);
 *
 * @param {int} $span - number of columns to span
 * @param {int} $total - number of total columns the grid has
 * @param {number w/ unit} $gutter - width of the gutters between columns
 */
/*
* Hide only visually, but have it available for screen readers:
* http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
*/
.visuallyhidden, .toggle__checkbox {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	/*
  * Extends the .visuallyhidden class to allow the element
  * to be focusable when navigated to via the keyboard:
  * https://www.drupal.org/node/897638
  */ }
	.visuallyhidden.focusable:focus, .visuallyhidden.focusable:active, .focusable.toggle__checkbox:focus, .focusable.toggle__checkbox:active {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto; }

*, *::before, *::after {
	box-sizing: inherit; }

/**
 * Settings
 *
 * Global settings and variables. This defines global site wide things like
 * colors and fonts.
 */
/***
 *  Type Scale mixins
 *
 *  Created using [Gridlover](http://www.gridlover.net/try).  Values were size 16,
 *  line height 2, scale factor 1.5
 *
 *  code:
 *    @include h1;
 *    @include h2;
 *    @include h3;
 *    @include h4;
 *    @include body;
 *    @include small;
 */
/***
 * Quarks
 *
 * Element level styles meant to apply globally.  These define what elements look like if no class is applied to them.  Effectively our site specific _normalize.css_.
 * > Note that these files contain only the default styles for these elements, not modified elements. For example, if we have a table that looks and works entirely differently from the default tables used throughout the website, it would not be a quark.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
html {
	padding: 0;
	margin: 0;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale; }

body {
	font-family: "Lato", sans-serif;
	font-size: 1rem;
	line-height: 2rem;
	font-weight: 300;
	margin: 0;
	padding: 0;
	background: #fff;
	color: #333; }

/***
 * Typography
 *
 * Default text styles.
 *
 * html:
 *   <h1>Heading Level 1</h1>
 *   <h2>Heading Level 2</h2>
 *   <h3>Heading Level 3</h3>
 *   <h4>Heading Level 4</h4>
 *   <p>Unde quo, minus eaque eligendi cum tempore, nulla, accusamus est labore tenetur modi eveniet obcaecati voluptas eius vitae vero dolorem nobis culpa nihil. Itaque saepe suscipit odit fugit quidem culpa.</p>
 *   <p>Accusantium recusandae, dignissimos rerum quaerat voluptatem quis itaque deleniti sequi autem explicabo dolore delectus, doloremque eos. Accusantium<sup>sup</sup> recusandae<sub>sub</sub> eius, debitis voluptates adipisci aspernatur rem voluptatum, delectus, tempore accusantium dolorum cumque error.</p>
 */
h1, .h1 {
	font-size: 3.375rem;
	line-height: 4rem;
	font-family: "Source Sans Pro", sans-serif;
	margin: 0; }

h2, .h2 {
	font-size: 2.25rem;
	line-height: 3rem;
	font-family: "Source Sans Pro", sans-serif;
	margin: 0; }

h3, .h3 {
	font-size: 1.5rem;
	line-height: 2rem;
	font-family: "Source Sans Pro", sans-serif;
	margin: 0; }

h4, .h4 {
	font-size: 1.25rem;
	line-height: 2rem;
	font-family: "Source Sans Pro", sans-serif;
	margin: 0; }

p {
	margin: 1rem auto; }

strong {
	font-weight: 700; }

em {
	font-style: italic; }

/***
 * Links
 *
 * html:
 *   <a href="#">Simple Default Link</a>
 */
a {
	color: #046C6F;
	transition: color 0.15s;
	text-decoration: none;
	font-weight: 600; }
	a:hover {
		color: #11c1c4; }

/**
 *  Image Resets
 */
img {
	display: inline-block;
	max-width: 100%;
	border: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
	overflow: hidden; }

[src$='svg'] {
	width: auto;
	height: auto; }

/***
 * Horizontal Rule
 *
 * html:
 *   <hr>
 */
hr {
	display: block;
	width: auto;
	margin: 3rem 3rem;
	border: none;
	height: 1px;
	background: #e9eaf0; }
	@media only screen and (min-width: 45.625em) {
		hr {
			margin: 3rem 6rem; } }

/***
 *  Lists
 *
 *  html:
 *    <ul>
 *      <li>Lorem ipsum dolor sit amet</li>
 *      <li>Minima recusandae adipisci quidem</li>
 *      <li>Amet eum non animi soluta</li>
 *      <li>Saepe commodi nesciunt quaerat quae minima</li>
 *    </ul>
 *    <ol>
 *      <li>Lorem ipsum dolor sit amet</li>
 *      <li>Minima recusandae adipisci quidem</li>
 *      <li>Amet eum non animi soluta</li>
 *      <li>Saepe commodi nesciunt quaerat quae minima</li>
 *    </ol>
 */
ul, ol {
	margin: 2rem 0;
	padding-left: 2rem; }

li {
	margin: 1rem 0; }

/***
 * Blockquote
 *
 * Inset with a left border.
 *
 * html:
 *   <blockquote>
 *     <p>"Some content that's a quote."</p>
 *   </blockquote>
 */
blockquote {
	margin: 1rem 0;
	padding: 0 0 0 0.75rem;
	border-left: 0.25rem solid #e9eaf0; }

/***
 * Table
 *
 * html:
 *   <table>
 *     <tr>
 *       <th>Lorem</th>
 *       <td>Ipsum</td>
 *       <td>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Esse
 *          perspiciatis vitae sunt, magnam blanditiis unde velit quis perferendis
 *          iure ut excepturi tempora eos autem accusamus amet et, non? Distinctio,
 *          eaque.</td>
 *     </tr>
 *     <tr>
 *       <th>Sit</th>
 *       <td>Amet</td>
 *       <td>Lorem</td>
 *     </tr>
 *     <tr>
 *       <th>Ipsum</th>
 *       <td>Dolor</td>
 *       <td>Sit</td>
 *     </tr>
 *   </table>
 */
table {
	display: table;
	width: 100%;
	box-sizing: border-box;
	border-collapse: collapse; }

tr {
	border-top: 1px solid #e9eaf0;
	border-bottom: 1px solid #e9eaf0; }

th, td {
	text-align: left;
	padding: 0.5rem 1rem;
	vertical-align: top; }
	@media only screen and (max-width: 45.615em) {
		th, td {
			display: block; } }

/***
 *  Code
 *
 *  &lt;code&gt; elements. Uses `$font-mono`.
 *
 *  html:
 *    <code>this.is_some("code")</code>
 */
code {
	font-family: "Source Code Pro", monospace; }

/***
 * Atoms
 *
 * These are the smallest level of styles that merit a class.  Examples are buttons, icons, and text variations like disclaimers.
 * > The styles in an atom should almost never be attached to an HTML element itself; we might not be able to guarantee what the markup will look like in the future. Specifying a class instead is always safer.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 *  File Path
 *
 *  Light text showing where to find the element being described.
 *
 *  html:
 *    <p class="file-path">./dev/scss/super/_awesome-file.scss</p>
 */
.file-path {
	font-size: 0.875rem;
	line-height: 1.5rem;
	font-family: "Source Code Pro", monospace;
	margin: 0;
	color: rgba(33, 33, 33, 0.5); }

/***
 *  Color Swatch
 *
 *  The swatch samples near the beginning of the guide.
 *
 *  html:
 *    <div class="ag-swatch">
 *      <span class="ag-swatch__var-name">$color-name</span>
 *      <span class="ag-swatch__value">#abcdef</span>
 *    </div>
 *
 *  @default .ag-swatch--light
 *  @modifier .ag-swatch--dark - swap for light text on dark colors. Example color isn't particularly dark, though.
 */
.ag-swatch {
	box-sizing: border-box;
	float: left;
	min-height: 1px;
	width: 50%;
	margin-left: 0;
	margin-right: 0;
	position: relative;
	height: 6rem;
	overflow: hidden;
	background: #abcdef; }
	@media only screen and (min-width: 45.625em) {
		.ag-swatch {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: 33.33333%;
			margin-left: 0;
			margin-right: 0; } }
	@media only screen and (min-width: 60em) {
		.ag-swatch {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: 25%;
			margin-left: 0;
			margin-right: 0;
			height: 9rem; } }
	.ag-swatch--dark {
		color: #fff; }

.ag-swatch__var-name {
	font-family: "Source Code Pro", monospace;
	position: absolute;
	right: 1rem;
	bottom: 0;
	white-space: nowrap; }

.ag-swatch__value {
	font-family: "Source Sans Pro", sans-serif;
	position: absolute;
	right: .01em;
	bottom: 0;
	left: .01em;
	opacity: .25;
	font-size: 2.5rem;
	line-height: 1; }
	.ag-swatch__value--hex {
		right: 0;
		left: -0.5rem;
		bottom: -0.75rem;
		font-size: 4rem; }

/***
 *  Font Sample
 *
 *  Shows the first font found in the font stack of variables in a file named fonts.scss.
 *
 *  html:
 *    <div class="ag-font">
 *      <span class="ag-font__var-name">$my-font</span>
 *      <span class="ag-font__value" style="font-family: 'Times New Roman', serif;">
 *        Times New Roman
 *      </span>
 *    </div>
 */
.ag-font {
	box-sizing: border-box;
	float: left;
	min-height: 1px;
	width: calc(100% - 2rem);
	margin-left: 1rem;
	margin-right: 1rem;
	margin: 2rem auto; }
	@media only screen and (min-width: 45.625em) {
		.ag-font {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: calc(50% - 2rem);
			margin-left: 1rem;
			margin-right: 1rem; }
			.ag-font:nth-child(2n) {
				clear: left; } }

.ag-font__var-name {
	font-family: "Source Code Pro", monospace;
	display: block; }

.ag-font__value {
	font-size: 2.25rem;
	line-height: 3rem; }

/***
 *  Description
 *
 *  Container for the output of the markdown description for each element.
 *
 *  html:
 *    <div class="ag-description">
 *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Est non eum sit qui cum veniam optio deserunt, perspiciatis id eligendi sequi facere illum ad nobis soluta assumenda natus beatae molestiae.</p>
 *    </div>
 */
.ag-description {
	max-width: 49rem; }
	.ag-component-header + .ag-description > :first-child {
		margin-top: 0; }

/***
 *  Button
 *
 *  Basic button, and its variations.
 *
 *  @modifier .button--small
 *
 *  html:
 *    <a class="button">Click Here, Dummy</a>
 */
.button, .toggle__button {
	font-size: 1rem;
	line-height: 2rem;
	font-family: "Source Sans Pro", sans-serif;
	position: relative;
	display: inline-block;
	padding: 0.5rem 1rem;
	border: 1px solid #046C6F;
	border-radius: 0.25rem;
	cursor: pointer;
	transition: all .3s;
	color: #046C6F; }
	.button:hover, .toggle__button:hover {
		border-color: #11c1c4;
		box-shadow: inset 0 0 1rem rgba(4, 108, 111, 0.25);
		color: #11c1c4; }

.button--small {
	font-size: 0.875rem;
	line-height: 1.5rem;
	padding: 0.25rem 0.5rem; }

/***
 *  Toggle
 *
 *  A button that stays active based on a hidden checkbox. Class extends
 *  [button](#/atoms/button).
 *
 *  html:
 *    <div class="toggle">
 *      <input type="checkbox" id="sample" class="toggle__checkbox">
 *      <label for="sample" class="toggle__button">I Toggle</label>
 *    </div>
 */
.toggle {
	display: inline-block; }

.toggle__checkbox:checked ~ .toggle__button {
	background: #e9eaf0; }

/***
 *  Component Header
 *
 *  Small header for identifying components.
 *
 *  html:
 *    <h4 class="ag-component-header">See Below</h4>
 */
.ag-component-header {
	margin: 2rem 0 0; }

/***
 * Molecules
 *
 * Structures which combine multiple elements to create a coherent piece. A masthead with an image and headline, or a nav dropdown containing numerous links, for example.
 * > This is where we can combine multiple quarks and atoms, without interfering with any of our global styles.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 *  Component
 *
 *  Each individual bit of crap to display.
 *
 *  @modifier .ag-component--html
 *  @modifier .ag-component--code
 *
 *  html:
 *    <div class="ag-component">
 *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus, velit, est! Perspiciatis consectetur non eos sequi, mollitia porro recusandae voluptatem, eum aliquam possimus a dolorum saepe pariatur repudiandae in nobis.</p>
 *    </div>
 */
.ag-component--html {
	display: block;
	width: 100%;
	max-width: 62.5rem;
	border: 0.25rem solid #e9eaf0;
	margin: 1rem auto;
	box-sizing: content-box;
	background: #fff; }
	.ag-component--html.fs {
		max-width: 100%;
		margin: 1rem 0;
		border-width: 0.25rem 0; }

.ag-component--code {
	display: none;
	background: #e9eaf0;
	margin: 0 -1rem;
	padding: 1rem 1rem;
	overflow: auto; }
	.show-dev .ag-component--code {
		display: block; }

/***
 *  Parameter Description
 *
 *  Describes a parameter included using `@param {type} name - description`.
 *
 *  html:
 *    <div class="ag-param">
 *      <span class="ag-param__type">object</span>
 *      <span class="ag-param__name">myVar</span>
 *      <div class="ag-param__description ag-description">Makes the function do something awesome.</div>
 *    </div>
 */
.ag-param {
	padding-left: 1rem; }

.ag-param__type {
	font-family: "Source Code Pro", monospace;
	color: rgba(33, 33, 33, 0.5); }

.ag-param__name {
	font-family: "Source Code Pro", monospace;
	font-weight: 700; }

.ag-param__description {
	padding-left: 1rem; }
	.ag-param__description > :first-child {
		margin-top: 0; }

/***
 * Organisms
 *
 * These are big things that combine everything smaller.  An entire form containing molecules of labels with inputs, or the global site header, for example.
 * > Organisms are groups of molecules joined together to form a relatively complex, distinct section of an interface.
 * >
 * >\- http://bradfrost.com/blog/post/atomic-web-design/#organisms
 */
/***
 *  Section
 *
 *  The main sections of the guide.  Modifiers would define variations.
 *
 *  html:
 *    <section class="ag-section {{ modifier }}">
 *      <div class="ag-section__inner">
 *        <header class="ag-section__header">
 *          <h4>This is a Section</h4>
 *        </header>
 *        <div class="ag-section__description"><p>The info here is <em>super</em> important!</p></div>
 *      </div>
 *    </section>
 */
.ag-section {
	margin: 8rem auto;
	position: relative;
	overflow: hidden; }
	.ag-section--depth-1 {
		margin-top: 12rem; }

.ag-section__inner {
	max-width: 60rem;
	padding: 0 1rem;
	margin: 0 auto;
	box-sizing: border-box; }
	.ag-section--depth-2 .ag-section__inner {
		padding-left: 2rem; }
	.ag-section--depth-3 .ag-section__inner {
		padding-left: 3rem; }
	.ag-section--depth-4 .ag-section__inner {
		padding-left: 4rem; }
	.ag-section--depth-5 .ag-section__inner {
		padding-left: 5rem; }

.ag-section__sub-elements {
	position: relative;
	padding-top: 4rem;
	margin-top: 2rem; }
	.ag-section__sub-elements::before {
		content: '';
		position: absolute;
		top: 0;
		bottom: 0;
		margin: 0 auto;
		width: 60rem;
		max-width: 100%;
		border-left: 1px solid #e9eaf0;
		transform: translateX(-50%);
		pointer-events: none; }
	.ag-section__sub-elements > .ag-section:first-child {
		margin-top: 0; }
	.ag-section__sub-elements > .ag-section:last-child {
		margin-bottom: 0; }
	.ag-section--depth-1 .ag-section__sub-elements::before {
		left: calc(50% + 1rem); }
	.ag-section--depth-2 .ag-section__sub-elements::before {
		left: calc(50% + 2rem); }
	.ag-section--depth-3 .ag-section__sub-elements::before {
		left: calc(50% + 3rem); }
	.ag-section--depth-4 .ag-section__sub-elements::before {
		left: calc(50% + 4rem); }
	.ag-section--depth-5 .ag-section__sub-elements::before {
		left: calc(50% + 5rem); }

/***
 *  Main Header
 *
 *  Simple fixed header with the controls.
 *
 *  html:
 *    <header class="header-main">
 *      <h1 class="header-main__title">Styleguide</h1>
 *      <div class="header-main__controls">
 *        <div class="toggle">
 *          <input type="checkbox" id="showGrids" class="toggle__checkbox">
 *          <label for="showGrids" class="toggle__button button--small">Show Grid</label>
 *        </div>
 *        <div class="toggle">
 *          <input type="checkbox" id="showDev" class="toggle__checkbox" {% if showDev %}checked{% endif %}>
 *          <label for="showDev" class="toggle__button button--small">Show Code Sections</label>
 *        </div>
 *      </div>
 *    </header>
 */
.header-main {
	background: #fff;
	padding: 0.5rem 0;
	position: fixed;
	top: 0;
	right: 0;
	left: 0;
	z-index: 8675309;
	border-bottom: 2px solid #046C6F; }

.header-main__title {
	font-size: 1.5rem;
	line-height: 2rem;
	box-sizing: border-box;
	float: left;
	min-height: 1px;
	width: calc(100% - 2rem);
	margin-left: 1rem;
	margin-right: 1rem; }
	@media only screen and (min-width: 60em) {
		.header-main__title {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: calc(66.66667% - 2rem);
			margin-left: 1rem;
			margin-right: 1rem; } }

.header-main__controls {
	box-sizing: border-box;
	float: left;
	min-height: 1px;
	width: calc(100% - 2rem);
	margin-left: 1rem;
	margin-right: 1rem;
	text-align: right; }
	@media only screen and (min-width: 60em) {
		.header-main__controls {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: calc(33.33333% - 2rem);
			margin-left: 1rem;
			margin-right: 1rem; } }

/***
 *  Main Footer
 *
 *  Just a quick signoff.
 *
 *  html:
 *    <footer class="footer-main">
 *      <p>Created using <a href="https://github.com/jhereg00/autoguide" target="_blank">Autoguide</a>.</p>
 *    </footer>
 */
.footer-main {
	font-size: 0.875rem;
	line-height: 1.5rem;
	padding: 1rem 1rem;
	margin-top: 8rem;
	background: #66676a;
	color: #fff; }
	.footer-main a {
		text-decoration: underline;
		color: inherit; }

/**
 * .dev-only defines if an element should only show when dev view is enabled
 */
.dev-only {
	display: none; }
	.show-dev .dev-only {
		display: block; }

/*# sourceMappingURL=data:application/json;base64, */
