@charset "UTF-8";
/***
 * Utilities
 *
 * Reusable functions, mixins, and helper classes.  Things like colors, vertical rhythm, and the .clear-fix helper are in this group.
 * > This directory of partials is also important because weâ€™ll need to define global classes, mixins and styles that can be used anywhere and at any time.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
.clear-fix::after {
	content: '';
	display: table;
	clear: both; }

/*
* Hide only visually, but have it available for screen readers:
* http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
*/
.visuallyhidden {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	/*
  * Extends the .visuallyhidden class to allow the element
  * to be focusable when navigated to via the keyboard:
  * https://www.drupal.org/node/897638
  */ }
	.visuallyhidden.focusable:focus, .visuallyhidden.focusable:active {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto; }

*, *::before, *::after {
	box-sizing: inherit; }

/**
 * Settings
 *
 * Global settings and variables. This defines global site wide things like
 * colors and fonts.
 */
/***
 * Quarks
 *
 * Element level styles meant to apply globally.  These define what elements look like if no class is applied to them.  Effectively our site specific _normalize.css_.
 * > Note that these files contain only the default styles for these elements, not modified elements. For example, if we have a table that looks and works entirely differently from the default tables used throughout the website, it would not be a quark.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
html {
	padding: 0;
	margin: 0;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale; }

body {
	font-family: "Open Sans", "Helvetica", "Arial", sans-serif;
	font-size: 1rem;
	line-height: 2rem;
	font-weight: 300;
	margin: 0;
	padding: 0;
	background: #fff;
	color: #6d6f72; }

h1, .h1 {
	font-size: 2.625rem;
	line-height: 3rem;
	margin: 4rem auto 3rem;
	color: #006685; }
	@media only screen and (min-width: 45.625em) {
		h1, .h1 {
			font-size: 4.5rem;
			line-height: 5rem; } }

h2, .h2 {
	font-size: 2rem;
	line-height: 2rem;
	margin: 3rem auto 2rem;
	color: #006685; }
	@media only screen and (min-width: 45.625em) {
		h2, .h2 {
			font-size: 3rem;
			line-height: 4rem; } }

h3, .h3 {
	font-size: 1.5rem;
	line-height: 2rem;
	margin: 2rem auto 1rem;
	color: #006685; }
	@media only screen and (min-width: 45.625em) {
		h3, .h3 {
			font-size: 1.875rem; } }

h4, .h4 {
	font-size: 1.25rem;
	line-height: 2rem;
	margin: 1rem auto; }
	@media only screen and (min-width: 45.625em) {
		h4, .h4 {
			font-size: 1.5rem; } }

p {
	margin: 1rem auto; }

strong {
	font-weight: 700; }

a {
	color: #006685;
	transition: color 0.15s;
	text-decoration: none;
	font-weight: 600; }
	a:hover {
		color: #29a1c7; }

img {
	display: inline-block;
	max-width: 100%;
	border: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
	overflow: hidden; }

[src$='svg'] {
	width: auto;
	height: auto; }

hr {
	display: block;
	width: auto;
	margin: 3rem 3rem;
	border: none;
	height: 1px;
	background: #fff; }
	@media only screen and (min-width: 45.625em) {
		hr {
			margin: 3rem 6rem; } }

ul {
	margin: 2rem 0;
	padding-left: 2rem; }

li {
	margin: 1rem 0; }

/*# sourceMappingURL=data:application/json;base64, */
