@charset "UTF-8";
/***
 * Utilities
 *
 * Reusable functions, mixins, and helper classes.  Things like colors, vertical rhythm, and the .clear-fix helper are in this group.
 * > This directory of partials is also important because we’ll need to define global classes, mixins and styles that can be used anywhere and at any time.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
@font-face {
	font-family: "icons";
	src: url("../fonts/icons.eot");
	src: url("../fonts/icons.eot?#iefix") format("eot"), url("../fonts/icons.woff2") format("woff2"), url("../fonts/icons.woff") format("woff"), url("../fonts/icons.ttf") format("truetype"), url("../fonts/icons.svg#icons") format("svg"); }

.icon-atoms:before, .icon-code:before, .icon-colors:before, .icon-copy:before, .icon-desktop:before, .icon-fonts:before, .icon-html:before, .icon-menu:before, .icon-molecules:before, .icon-organisms:before, .icon-phone:before, .icon-quarks:before, .icon-right-arrow:before, .icon-settings:before, .icon-tablet:before, .icon-utilities:before, .button--icon-settings:before, .button--icon-menu:before, .button--icon-phone:before, .button--icon-tablet:before, .button--icon-desktop:before, .button--icon-right-arrow:before, .button--icon-copy:before, [data-copy]:before, .section__title:before, .section__title--colors:before, .section__title--fonts:before, .section__title--quarks:before, .section__title--atoms:before, .section__title--molecules:before, .section__title--organisms:before, .section__title--settings:before, .section__title--utilities:before, .section__title--menu:before, .section__title--phone:before, .section__title--table:before, .section__title--desktop:before {
	font-family: "icons";
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	font-style: normal;
	font-variant: normal;
	font-weight: normal;
	text-decoration: none;
	text-transform: none; }

.icon-atoms:before {
	content: ""; }

.icon-code:before {
	content: ""; }

.icon-colors:before {
	content: ""; }

.icon-copy:before {
	content: ""; }

.icon-desktop:before {
	content: ""; }

.icon-fonts:before {
	content: ""; }

.icon-html:before {
	content: ""; }

.icon-menu:before {
	content: ""; }

.icon-molecules:before {
	content: ""; }

.icon-organisms:before {
	content: ""; }

.icon-phone:before {
	content: ""; }

.icon-quarks:before {
	content: ""; }

.icon-right-arrow:before {
	content: ""; }

.icon-settings:before {
	content: ""; }

.icon-tablet:before {
	content: ""; }

.icon-utilities:before {
	content: ""; }

/***
 * Strip Units
 *
 * Strips the units from a number
 *
 * scss:
 *   stripUnits($number);
 *
 * @param $number - value to strip the units from.
 */
/***
 * Pixels to Rems function
 *
 * Converts pixels to REMs so we can keep our units consistent.  Assumes 1rem is 16px (default for most browsers).
 *
 * scss:
 *   pxToRem($px[,$baseRem]);
 *
 * @param $px - unitless integer to convert to rems
 * @param $baseRem - pixels to count as one rem. Defaults to 16
 */
/***
 * Pixels to Ems function
 *
 * Converts pixels to EMs so we can keep our units consistent.  Assumes 1em is 16px, or you can pass a different base.
 *
 * scss:
 *   pxToEm($px[,$base]);
 *
 * @param $px - unitless integer to convert to rems
 * @param $base - pixels to count as one em. Defaults to 16
 */
/***
 * Square Root Function
 *
 * Gets the square root of a number (within a margin of error)
 *
 * Useful for diagonal/Pythagorean stuff.
 *
 * scss:
 *   sqrt($num)
 *
 * @param $num - number to get square root of
 */
/***
 * Power / Exponent Function
 *
 * Raises a number to a certain power. Supports integers and .5s as the exponent.
 *
 * Useful for diagonal/Pythagorean stuff.
 *
 * scss:
 *   pow($base, $exponent)
 *
 * @param $base - number to get square root of
 * @param $exponent - exponent to raise the base number to
 */
/***
 * Modular Scale Function
 *
 * Determines a size from a base, multiple, and scale factor.
 *
 * scss:
 *   font-size: modularScale(16, 3, 1.5); // 36
 */
/***
 * Aspect Ratio
 *
 * Gets padding for correct aspect ratio, and sets height to 0.
 *
 * scss:
 *   @include aspect-ratio($width, $height)
 *
 * @param {Number} $width - comparative width of the ratio. The 'x' in x:y
 * @param {Number} $height - comparative height of the ratio. The 'y' in x:y
 */
/***
 * Quantity Query
 *
 * Mixins to allow styles to be set based on at-least, at-most, and exactly `n`
 * number of an element.
 *
 * scss:
 *   @include qqAtLeast ($n) {
 *     @content;
 *   }
 *  
 *   @include qqAtMost ($n) {
 *     @content;
 *   }
 *  
 *   @include qqExactly ($n) {
 *     @content;
 *   }
 *
 * @param $n - how many elements to query against
 * @param @content - the styles to apply to it
 */
/***
 * Mod Query
 *
 * A damn clever way to select elements when the number of children is divisible
 * by a given integer. As opposed to the absolute [Quantity Query](#/utilities/mixins/quantity-query),
 * this selects when `children % n = 0`, or if a remainder is also passed, when
 * `children % n = remainder`.
 *
 * Gleefully stolen from Patrick Clancey's article: http://alistapart.com/article/using-css-mod-queries-with-range-selectors
 *
 * @param $divisibleBy
 * @param $remainder
 * @param $selector - string passed that represents selector for siblings
 *
 * scss:
 *   @include selectRange(5,9) {
 *     // things you want only items 5 - 9 to do
 *   }
 *   @include modQuery(3, 0, '.custom-selector') {
 *     // things you want all .custom-selectors in a given parent to do
 *     // when their total number is divisible by 3
 *   }
 *   @include modFirst(3, 1) {
 *     // things you want the first element to do when the total number of
 *     // children matches n % 3 == 1
 *   }
 */
/***
 * Media Queries
 *
 * Defines our default breakpoints.  Assumes mobile-first code, but supports not
 * by passing your breakpoint to the alternate mixin: `mq-lt`. Don't worry about
 * having a ton of these, since the minification process will combine them.
 *
 * There's also a separate mixin each for `portrait` and `landscape` orientations.
 *
 * scss:
 *   @include mq($breakpoint) {
 *     @content;
 *   }
 *   @include portrait {
 *     @content;
 *   }
 *   @include landscape {
 *     @content;
 *   }
 *
 * @param $breakpoint - what size you'd like to target larger than. A few have been pre-defined.
 * @param @content - the content to put in the media query
 */
/***
 *  Clear Fix
 *
 *  Clears all floats inside this element by using the `::after` pseudo-element.
 *
 *  scss:
 *    @include clear-fix;
 *    // or
 *    @extend %clear-fix;
 */
.button-group::after, .section::after, .section__inner::after, .component::after, .palette::after {
	content: '';
	display: table;
	clear: both; }

/***
 * Grid
 *
 * Our super simple custom grid system. Just include the mixin `gridContainer`
 * to set max-width = $max-width + $gutter. For internal stuff, use
 * `subgridContainer` to automatically offset the margins on the container if
 * needed, and `colspan` on the actual column.  By default, assumes 12 columns
 * and a 2 * $wr gutter, but those can be overridden for more complex layouts.
 * It spits out styles wherever it is called, so you can define different
 * columns or even entirely different grids within media queries.
 *
 * There's also a colpush mixin to shift an element to the right by a number of columns.
 *
 * Remember, variables wrapped in `[]` in the example are optional.
 *
 * scss:
 *   @include gridContainer ([$gutter]);
 *   @include subgridContainer ([$gutter]);
 *   @include colspan ($span[, $total[, $gutter]]);
 *   @include colpush ($span[, $total[, $gutter]]);
 *
 * @param {int} $span - number of columns to span
 * @param {int} $total - number of total columns the grid has
 * @param {number w/ unit} $gutter - width of the gutters between columns
 */
/*
* Hide only visually, but have it available for screen readers:
* http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
*/
.visuallyhidden {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	/*
  * Extends the .visuallyhidden class to allow the element
  * to be focusable when navigated to via the keyboard:
  * https://www.drupal.org/node/897638
  */ }
	.visuallyhidden.focusable:focus, .visuallyhidden.focusable:active {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto; }

*, *::before, *::after {
	box-sizing: inherit; }

/**
 * Settings
 *
 * Global settings and variables. This defines global site wide things like
 * colors and fonts.
 */
/***
 * Visual Rhythm
 *
 * Variables to maintain a standard visual rhythm both vertically and horizontally.
 *
 * Also, there's a function for returning the next multiple of vertical rhythm
 * above a given number.
 *
 * @param {Number} $base - number to find next multiple above.
 * @param {optional, Number} $rhythm - number that's multiplied until it's larger than `$base`. Equal to `$vr` if omitted.
 *
 * scss:
 *   line-height: multipleAbove(30, 14); // 3;
 */
/***
 * Colors
 *
 * These colors define the look of the guide itself, _not_ anything within the examples.
 *
 * path: .
 */
/***
 * Primary Palette
 *
 * The main colors used for the Autoguide template.  By default, these colors get
 * reused for the more detailed palette.
 *
 * Note to learners: these variable names are less than stellar.  They're kept
 * intentionally vague, because of their wide application.
 *
 * path: ./colors
 * order: 0
 * template: color
 */
/***
 * Detailed Palette
 *
 * These are the colors that will actually appear throughout the generated guide.
 * Altering these will grant a very fine level of control over components.
 *
 * The colors titled `$background-*` are used directly as the background property
 * for their given element, so you can replace them with anything that could apply
 * there.  For example: `$background-header: url(https://morbotron.com/img/S03E06/1053451.jpg) center center no-repeat`.
 *
 * path: ./colors
 * order: 1
 * template: color
 */
/***
 * Code Colors
 *
 * These are the color variables that can be overridden for code blocks.
 *
 * template: color
 * path: ./molecules/code block
 */
/***
 * Fonts
 *
 * The font families used throughout the guide.  These can be overridden just like
 * colors.  If you need to load a webfont, you can do so in your `sassPrepend` file
 * using `@import`.
 *
 * template: font
 * path: ./
 */
/***
 *  Type Scale mixins
 *
 *  Created using a modular scale. Factor is 1.4. This means, starting at a base
 *  of `20px`, the next size up (`h3`) is `20 * 1.4 = 28`. To simplify this, the
 *  math is handled by the [`modularScale`](#/utilities/functions/modularScale)
 *  function.
 *
 *  Additionally, `h4` splits between body and `h3`, while `small` is an
 *  arbitrary size.
 *
 *  scss:
 *    @include h1;
 *    @include h2;
 *    @include h3;
 *    @include h4;
 *    @include body;
 *    @include small;
 */
/***
 * Quarks
 *
 * Element level styles meant to apply globally.  These define what elements look like if no class is applied to them.  Effectively our site specific _normalize.css_.
 * > Note that these files contain only the default styles for these elements, not modified elements. For example, if we have a table that looks and works entirely differently from the default tables used throughout the website, it would not be a quark.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
html {
	padding: 0;
	margin: 0;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale; }

body {
	font-family: "Lato", sans-serif;
	font-size: 1.25rem;
	line-height: 2rem;
	font-weight: 300;
	margin: 0;
	padding: 0;
	background: #fff;
	color: #333; }

/***
 * Typography
 *
 * Default text styles.
 *
 * html:
 *   <h1>Heading Level 1</h1>
 *   <h2>Heading Level 2</h2>
 *   <h3>Heading Level 3</h3>
 *   <h4>Heading Level 4</h4>
 *   <p>Unde quo, minus eaque eligendi cum tempore, nulla, accusamus est labore tenetur modi eveniet obcaecati voluptas eius vitae vero dolorem nobis culpa nihil. Itaque saepe suscipit odit fugit quidem culpa.</p>
 *   <p>Accusantium recusandae, dignissimos rerum quaerat voluptatem quis itaque deleniti sequi autem explicabo dolore delectus, doloremque eos. Accusantium<sup>sup</sup> recusandae<sub>sub</sub> eius, debitis voluptates adipisci aspernatur rem voluptatum, delectus, tempore accusantium dolorum cumque error.</p>
 */
h1, .h1 {
	font-size: 3.43rem;
	line-height: 4rem;
	font-family: "Droid Serif", serif;
	weight: 400;
	margin: 0; }

h2, .h2 {
	font-size: 2.45rem;
	line-height: 3rem;
	font-family: "Droid Serif", serif;
	weight: 400;
	margin: 0; }

h3, .h3 {
	font-size: 1.75rem;
	line-height: 2rem;
	font-family: "Droid Serif", serif;
	weight: 400;
	margin: 0; }

h4, .h4 {
	font-size: 1.47903rem;
	line-height: 2rem;
	font-family: "Droid Serif", serif;
	weight: 400;
	margin: 0; }

h5, .h5, h6, .h6 {
	font-size: 1.25rem;
	line-height: 2rem;
	font-family: "Droid Serif", serif;
	weight: 400;
	margin: 1rem 0 0; }

p {
	margin: 1rem auto; }

strong {
	font-weight: 700; }

em {
	font-style: italic; }

/***
 * Links
 *
 * html:
 *   <a href="#">Simple Default Link</a>
 */
a {
	color: #046C6F;
	transition: color 0.15s;
	text-decoration: none;
	font-weight: 600; }
	a:hover {
		color: #11c1c4; }

/**
 *  Image Resets
 */
img {
	display: inline-block;
	max-width: 100%;
	border: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
	overflow: hidden; }

[src$='svg'] {
	width: auto;
	height: auto; }

/***
 * Horizontal Rule
 *
 * html:
 *   <hr>
 */
hr {
	display: block;
	width: auto;
	margin: 3rem 3rem;
	border: none;
	height: 1px;
	background: #e9eaf0; }
	@media only screen and (min-width: 45.625em) {
		hr {
			margin: 3rem 6rem; } }

/***
 *  Lists
 *
 *  html:
 *    <ul>
 *      <li>Lorem ipsum dolor sit amet</li>
 *      <li>Minima recusandae adipisci quidem</li>
 *      <li>Amet eum non animi soluta</li>
 *      <li>Saepe commodi nesciunt quaerat quae minima</li>
 *    </ul>
 *    <ol>
 *      <li>Lorem ipsum dolor sit amet</li>
 *      <li>Minima recusandae adipisci quidem</li>
 *      <li>Amet eum non animi soluta</li>
 *      <li>Saepe commodi nesciunt quaerat quae minima</li>
 *    </ol>
 */
ul, ol {
	margin: 2rem 0;
	padding-left: 2rem; }

li {
	margin: 1rem 0; }

/***
 * Blockquote
 *
 * Inset with a left border.
 *
 * html:
 *   <blockquote>
 *     <p>"Some content that's a quote."</p>
 *   </blockquote>
 */
blockquote {
	margin: 1rem 0;
	padding: 0 0 0 0.75rem;
	border-left: 0.25rem solid #e9eaf0; }

/***
 * Table
 *
 * html:
 *   <table>
 *     <tr>
 *       <th>Lorem</th>
 *       <td>Ipsum</td>
 *       <td>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Esse
 *          perspiciatis vitae sunt, magnam blanditiis unde velit quis perferendis
 *          iure ut excepturi tempora eos autem accusamus amet et, non? Distinctio,
 *          eaque.</td>
 *     </tr>
 *     <tr>
 *       <th>Sit</th>
 *       <td>Amet</td>
 *       <td>Lorem</td>
 *     </tr>
 *     <tr>
 *       <th>Ipsum</th>
 *       <td>Dolor</td>
 *       <td>Sit</td>
 *     </tr>
 *   </table>
 */
table {
	display: table;
	width: 100%;
	box-sizing: border-box;
	border-collapse: collapse; }

tr {
	border-top: 1px solid #e9eaf0;
	border-bottom: 1px solid #e9eaf0; }

th, td {
	text-align: left;
	padding: 0.5rem 1rem;
	vertical-align: top; }
	@media only screen and (max-width: 45.615em) {
		th, td {
			display: block; } }

/***
 *  Code
 *
 *  `<code>` elements. Uses `$font-mono`.
 *
 *  html:
 *    <code>this.is_some("code")</code>
 */
code {
	font-family: "Source Code Pro", monospace; }

/***
 * Input
 *
 * Standard input element.
 *
 * html:
 *   <input type="text">
 */
input {
	display: block;
	width: 100%;
	padding: 0 0.5rem;
	box-sizing: border-box;
	background: transparent;
	border: 1px solid #e9eaf0;
	font-size: 1.25rem;
	line-height: 2rem;
	font-family: "Source Code Pro", monospace; }
	input:focus {
		border-color: #046C6F; }

/***
 * Atoms
 *
 * These are the smallest level of styles that merit a class.  Examples are buttons, icons, and text variations like disclaimers.
 * > The styles in an atom should almost never be attached to an HTML element itself; we might not be able to guarantee what the markup will look like in the future. Specifying a class instead is always safer.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 *  File Path
 *
 *  Light text showing where to find the element being described.
 *
 *  html:
 *    <p class="file-path">./dev/scss/super/_awesome-file.scss</p>
 */
.file-path {
	font-size: 0.875rem;
	line-height: 1rem;
	font-family: "Source Code Pro", monospace;
	margin: 0;
	color: rgba(51, 51, 51, 0.5); }

/***
 *  Color Swatch
 *
 *  Just a big block of color.
 *
 *  html:
 *    <div class="swatch"></div>
 *
 *  @default .swatch--light
 */
.swatch {
	min-height: 8rem;
	background: #046C6F; }

/***
 *  Font Sample
 *
 *  Shows the first font found in the font stack of variables in a file named fonts.scss.
 *
 *  html:
 *    <div class="font-sample">
 *      <span class="font-sample__var-name">$my-font</span>
 *      <span class="font-sample__value" style="font-family: 'Times New Roman', serif;">
 *        Times New Roman
 *      </span>
 *    </div>
 */
.font-sample {
	margin: 2rem auto; }

.font-sample__var-name {
	font-family: "Source Code Pro", monospace;
	display: block; }

.font-sample__value {
	font-size: 2.45rem;
	line-height: 3rem; }

/***
 *  Button
 *
 *  Basic button, and its variations.
 *
 *  @modifier .button--small
 *  @modifier .button--icon-phone
 *
 *  html:
 *    <a class="button">Click Here, Dummy</a>
 *
 *  template: html
 */
.button {
	font-size: 1.25rem;
	line-height: 2rem;
	position: relative;
	display: inline-block;
	padding: 0.5rem 1rem;
	border: 1px solid #046C6F;
	border-radius: 0.25rem;
	cursor: pointer;
	transition: all .3s;
	color: #046C6F;
	background: #fff; }
	.button:hover {
		border-color: #11c1c4;
		box-shadow: inset 0 0 1rem rgba(4, 108, 111, 0.25);
		color: #11c1c4; }
	.button--icon-settings {
		padding-left: calc(1.5em + 1rem); }
		.button--icon-settings:before {
			content: ""; }
		.button--icon-settings::before {
			position: absolute;
			top: 50%;
			left: 1rem;
			transform: translateY(-50%); }
	.button--icon-menu {
		padding-left: calc(1.5em + 1rem); }
		.button--icon-menu:before {
			content: ""; }
		.button--icon-menu::before {
			position: absolute;
			top: 50%;
			left: 1rem;
			transform: translateY(-50%); }
	.button--icon-phone {
		padding-left: calc(1.5em + 1rem); }
		.button--icon-phone:before {
			content: ""; }
		.button--icon-phone::before {
			position: absolute;
			top: 50%;
			left: 1rem;
			transform: translateY(-50%); }
	.button--icon-tablet {
		padding-left: calc(1.5em + 1rem); }
		.button--icon-tablet:before {
			content: ""; }
		.button--icon-tablet::before {
			position: absolute;
			top: 50%;
			left: 1rem;
			transform: translateY(-50%); }
	.button--icon-desktop {
		padding-left: calc(1.5em + 1rem); }
		.button--icon-desktop:before {
			content: ""; }
		.button--icon-desktop::before {
			position: absolute;
			top: 50%;
			left: 1rem;
			transform: translateY(-50%); }
	.button--icon-right-arrow {
		padding-left: calc(1.5em + 1rem); }
		.button--icon-right-arrow:before {
			content: ""; }
		.button--icon-right-arrow::before {
			position: absolute;
			top: 50%;
			left: 1rem;
			transform: translateY(-50%); }
	.button--icon-copy {
		padding-left: calc(1.5em + 1rem); }
		.button--icon-copy:before {
			content: ""; }
		.button--icon-copy::before {
			position: absolute;
			top: 50%;
			left: 1rem;
			transform: translateY(-50%); }

.button--small {
	font-size: 0.875rem;
	line-height: 1rem;
	padding: 0.25rem 0.5rem; }
	.button--small::before {
		left: 0.5rem; }

/***
 * Copyable element
 *
 * Element that, when clicked, copies a string to the user's clipboard.
 *
 * When hovered, an icon appears. It jumps when the user clicks (thus getting the copy).
 *
 * html:
 *   <span data-copy="Copy Me!">Click to "Copy Me"</span>
 */
[data-copy] {
	cursor: copy; }
	[data-copy]:before {
		content: ""; }
	[data-copy]::before {
		display: inline-block;
		width: 0;
		vertical-align: bottom;
		opacity: 0;
		transform: translateX(-0.25em);
		transition: opacity 0.15s linear, transform 0.15s ease-in;
		color: #046C6F; }
	[data-copy]:hover::before {
		opacity: 1;
		transform: translateX(-1em);
		transition-timing-function: ease-out; }
	[data-copy]:active::before {
		transform: translateY(-15%);
		transition-duration: 0s; }

/***
 * Attribute
 *
 * A parameter, method, or other array-like bit of info for a component.
 *
 * Assumes it's part of an [Attribute List](#/molecules/attribute-list).
 *
 * html:
 *   <dt class="attribute-list__term">
 *     <span class="attribute__type">DOMElement</span>
 *     <span class="attribute__name">makeInput()</span>
 *   </dt>
 *   <dd class="attribute-list__description">
 *     <div class="attribute__description">
 *       <p>internal function to make the input from which the string will be copied.</p>
 *     </div>
 *   </dd>
 *
 * wrap: dl.attribute-list
 */
.attribute__type {
	font-family: "Source Code Pro", monospace;
	font-size: 0.875rem;
	line-height: 1rem;
	margin-right: 1rem;
	color: rgba(51, 51, 51, 0.5);
	font-style: italic; }

.attribute__name {
	font-family: "Source Code Pro", monospace;
	font-weight: bold; }

.attribute__description > :first-child {
	margin-top: 0; }

/***
 * Molecules
 *
 * Structures which combine multiple elements to create a coherent piece. A header with an image and headline, or a nav dropdown containing numerous links, for example.
 * > This is where we can combine multiple quarks and atoms, without interfering with any of our global styles.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 *  Main Nav
 *
 *  html:
 *    <nav class="nav-main">
 *      <ul class="nav-main__list">
 *        <li class="nav-main__item"><a class="nav-main__link" href="#/colors">Colors</a></li>
 *        <li class="nav-main__item"><a class="nav-main__link" href="#/fonts">Fonts</a></li>
 *        <li class="nav-main__item">
 *          <a href="#/quarks" class="nav-main__link">Quarks</a>
 *          <ul class="nav-main__subnav">
 *            <li class="nav-main__item">
 *              <a href="#/quarks/blockquote" class="nav-main__link">Blockquote</a>
 *            </li>
 *            <li class="nav-main__item">
 *              <a href="#/quarks/code" class="nav-main__link">Code</a>
 *            </li>
 *          </ul>
 *        </li>
 *        <li class="nav-main__item">
 *          <a href="#/atoms" class="nav-main__link">Atoms</a>
 *        </li>
 *      </ul>
 *    </nav>
 */
.nav-main {
	max-height: 100%;
	padding: 2rem 1rem;
	overflow: auto;
	overflow: -moz-scrollbars-none; }
	.nav-main::-webkit-scrollbar {
		width: 0.25rem; }
	.nav-main__list {
		margin: 0;
		padding: 0;
		list-style-type: none; }
	.nav-main__item {
		margin: 0; }
	.nav-main__subnav {
		font-size: 0.875rem;
		line-height: 1rem;
		margin: 0;
		padding: 0;
		list-style-type: none; }
		.nav-main__subnav .nav-main__link {
			padding-left: 1rem; }
		.nav-main__subnav .nav-main__subnav .nav-main__link {
			padding-left: 2rem; }
		.nav-main__subnav .nav-main__subnav .nav-main__subnav .nav-main__link {
			padding-left: 3rem; }
		.nav-main__subnav .nav-main__subnav .nav-main__subnav .nav-main__subnav .nav-main__link {
			padding-left: 4rem; }
		.nav-main__subnav .nav-main__subnav .nav-main__subnav .nav-main__subnav .nav-main__subnav .nav-main__link {
			padding-left: 5rem; }
	.nav-main__link {
		display: block;
		position: relative; }

/***
 * Button Group
 *
 * Group of buttons with similar functions.
 *
 * Uses sexy-ass [mod queries](#/utilities/mixins/mod-query) to size buttons based
 * on whether the number is divisible by 2 or 3.
 *
 * html:
 *   <div class="button-group">
 *     <button class="button button-group__button">Button 1</button>
 *     <button class="button button-group__button">Button 2</button>
 *     <button class="button button-group__button">Button 3</button>
 *     <button class="button button-group__button">Button 4</button>
 *   </div>
 *
 *   <div class="button-group">
 *     <button class="button button-group__button">Button 1</button>
 *     <button class="button button-group__button">Button 2</button>
 *     <button class="button button-group__button">Button 3</button>
 *     <button class="button button-group__button">Button 4</button>
 *     <button class="button button-group__button">Button 5</button>
 *     <button class="button button-group__button">Button 6</button>
 *   </div>
 *
 *   <div class="button-group">
 *     <button class="button button-group__button">Button 1</button>
 *     <button class="button button-group__button">Button 2</button>
 *     <button class="button button-group__button">Button 3</button>
 *     <button class="button button-group__button">Button 4</button>
 *     <button class="button button-group__button">Button 5</button>
 *   </div>
 */
.button-group {
	margin: 1rem 0;
	display: -ms-flexbox;
	display: flex;
	-ms-flex-wrap: wrap;
	    flex-wrap: wrap; }
	.button-group__button {
		float: left;
		display: block;
		box-sizing: border-box;
		width: 100%;
		border-radius: 0;
		border-top-width: 0;
		-ms-flex-negative: 0;
		    flex-shrink: 0; }
		.button-group__button:first-child {
			border-top-left-radius: 0.25rem;
			border-top-right-radius: 0.25rem;
			border-top-width: 1px; }
		.button-group__button:last-child {
			border-bottom-left-radius: 0.25rem;
			border-bottom-right-radius: 0.25rem; }
		.button-group__button:nth-last-child(2n+0):first-child,
		.button-group__button:nth-last-child(2n+0):first-child ~ .button-group__button {
			width: 50%; }
			.button-group__button:nth-last-child(2n+0):first-child:first-child,
			.button-group__button:nth-last-child(2n+0):first-child ~ .button-group__button:first-child {
				border-top-right-radius: 0; }
			.button-group__button:nth-last-child(2n+0):first-child:nth-child(2),
			.button-group__button:nth-last-child(2n+0):first-child ~ .button-group__button:nth-child(2) {
				border-top-right-radius: 0.25rem;
				border-top-width: 1px; }
			.button-group__button:nth-last-child(2n+0):first-child:nth-child(2n),
			.button-group__button:nth-last-child(2n+0):first-child ~ .button-group__button:nth-child(2n) {
				border-left-width: 0; }
			.button-group__button:nth-last-child(2n+0):first-child:nth-last-child(2),
			.button-group__button:nth-last-child(2n+0):first-child ~ .button-group__button:nth-last-child(2) {
				border-bottom-left-radius: 0.25rem; }
			.button-group__button:nth-last-child(2n+0):first-child:last-child,
			.button-group__button:nth-last-child(2n+0):first-child ~ .button-group__button:last-child {
				border-bottom-left-radius: 0; }
		.button-group__button:nth-last-child(3n+0):first-child,
		.button-group__button:nth-last-child(3n+0):first-child ~ .button-group__button {
			width: 33.33333%; }
			.button-group__button:nth-last-child(3n+0):first-child:first-child,
			.button-group__button:nth-last-child(3n+0):first-child ~ .button-group__button:first-child {
				border-top-right-radius: 0; }
			.button-group__button:nth-last-child(3n+0):first-child:nth-child(2),
			.button-group__button:nth-last-child(3n+0):first-child ~ .button-group__button:nth-child(2) {
				border-top-width: 1px; }
			.button-group__button:nth-last-child(3n+0):first-child:nth-child(3),
			.button-group__button:nth-last-child(3n+0):first-child ~ .button-group__button:nth-child(3) {
				border-top-right-radius: 0.25rem;
				border-top-width: 1px; }
			.button-group__button:nth-last-child(3n+0):first-child:nth-child(2n),
			.button-group__button:nth-last-child(3n+0):first-child ~ .button-group__button:nth-child(2n) {
				border-left-width: 1px; }
			.button-group__button:nth-last-child(3n+0):first-child:nth-child(3n), .button-group__button:nth-last-child(3n+0):first-child:nth-child(3n-1),
			.button-group__button:nth-last-child(3n+0):first-child ~ .button-group__button:nth-child(3n),
			.button-group__button:nth-last-child(3n+0):first-child ~ .button-group__button:nth-child(3n-1) {
				border-left-width: 0; }
			.button-group__button:nth-last-child(3n+0):first-child:nth-last-child(3),
			.button-group__button:nth-last-child(3n+0):first-child ~ .button-group__button:nth-last-child(3) {
				border-bottom-left-radius: 0.25rem; }
			.button-group__button:nth-last-child(3n+0):first-child:last-child,
			.button-group__button:nth-last-child(3n+0):first-child ~ .button-group__button:last-child {
				border-bottom-left-radius: 0; }

/***
 * Color Sample
 *
 * A swatch and variable name + color value combo molecule. JS also makes the
 * variable name and value copyable with a click.
 *
 * @default .color--light
 * @modifier .color--dark - when a color's luminosity is < 55%.
 *
 * html:
 *   <div class="color">
 *     <div class="swatch" style="background-color: #f13b0c;"></div>
 *     <div class="color__details">
 *       <span class="color__var-name js-copyable" data-copy="$my-color">$my-color</span>
 *       <span class="color__value js-copyable" data-copy="#F13B0C">#F13B0C</span>
 *     </div>
 *   </div>
 */
.color {
	position: relative; }
	.color .swatch {
		width: 100%;
		height: 100%; }
	.color__details {
		position: absolute;
		right: 0;
		bottom: 0;
		left: 0;
		padding: 1rem 1rem;
		text-align: right; }
	.color__var-name {
		font-family: "Source Code Pro", monospace;
		display: block; }
	.color__value {
		display: block; }
	.color--dark {
		color: white; }
		.color--dark [data-copy]::before {
			color: white; }

.hljs-comment {
	color: rgba(51, 51, 51, 0.5);
	font-style: italic; }

.hljs-quote {
	color: rgba(51, 51, 51, 0.5);
	font-style: italic; }

.hljs-keyword {
	color: #333;
	font-weight: bold; }

.hljs-selector-tag {
	color: #333;
	font-weight: bold; }

.hljs-subst {
	color: #333; }

.hljs-number {
	color: #11c1c4; }

.hljs-literal {
	color: #11c1c4; }

.hljs-variable {
	color: #11c1c4; }

.hljs-template-variable {
	color: #11c1c4; }

.hljs-tag .hljs-attr {
	color: #11c1c4; }

.hljs-string {
	color: #186cbf; }

.hljs-doctag {
	color: #186cbf; }

.hljs-title {
	color: #14477a;
	font-weight: bold; }

.hljs-section {
	color: #14477a;
	font-weight: bold; }

.hljs-selector-id {
	color: #14477a;
	font-weight: bold; }

.hljs-type {
	color: #046C6F;
	font-weight: bold; }

.hljs-class .hljs-title {
	color: #046C6F;
	font-weight: bold; }

.hljs-tag {
	color: #03595b;
	font-weight: normal; }

.hljs-name {
	color: #03595b;
	font-weight: normal; }

.hljs-attribute {
	color: #03595b;
	font-weight: normal; }

.hljs-regexp {
	color: #14477a; }

.hljs-link {
	color: #14477a; }

.hljs-symbol {
	color: #113d68; }

.hljs-bullet {
	color: #113d68; }

.hljs-built_in {
	color: #046C6F; }

.hljs-builtin-name {
	color: #046C6F; }

.hljs-meta {
	color: rgba(51, 51, 51, 0.5);
	font-weight: bold; }

.hljs-deletion {
	background: #fdd; }

.hljs-addition {
	background: #dfd; }

.hljs-emphasis {
	font-style: italic; }

.hljs-strong {
	font-weight: bold; }

/***
 * Code Block
 *
 * A (usually) collapsable block of code. Colors are from a [unique palette](#/molecules/code-block/code-colors).
 * To see how the collapsable part works, check it out in its [JS section](#/app/collapsable).
 *
 * html:
 *   <div class="code-block js-collapsable is-open">
 *     <div class="code-block__header collapsable__toggle js-collapsable__toggle">
 *       <h6>HTML</h6>
 *     </div>
 *     <pre class="code-block__pre collapsable__content js-collapsable__content"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header-main"</span>&gt;</span>
 *     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header-main__title"</span>&gt;</span>Autoguide<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
 *   <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></code></pre>
 *   </div>
 */
.code-block {
	border: 0.25rem solid #e9eaf0; }
	.code-block__header {
		padding: 0 1rem;
		margin: 0; }
		.code-block__header h6 {
			margin: 0; }
	.code-block__pre {
		margin: 0;
		padding: 0;
		background: #e9eaf0;
		color: #333;
		overflow: auto; }
		.code-block__pre > code {
			display: block;
			padding: 1rem 1rem; }

/***
 * Attribute List
 *
 * A nestable list of attributes.
 *
 * html:
 *   <dl class="attribute-list attribute-list--methods">
 *     <h6 class="attribute-list__title">Methods</h6>
 *     <dt class="attribute-list__term">
 *       <span class="attribute__type">void</span>
 *       <span class="attribute__name">toggleGrid()</span>
 *     </dt>
 *     <dd class="attribute-list__description">
 *       <div class="attribute__description">
 *         <p>adds/removes the 'show-grid' class to the  element so we can show a grid overlay</p>
 *       </div>
 *     </dd>
 *     <dt class="attribute-list__term">
 *       <span class="attribute__type">void</span>
 *       <span class="attribute__name">setWidth(width)</span>
 *     </dt>
 *     <dd class="attribute-list__description">
 *       <div class="attribute__description">
 *         <p>sets the width of the iframe, useful for showing media queries</p>
 *       </div>
 *       <dl class="attribute-list attribute-list--parameters">
 *         <h6 class="attribute-list__title">Parameters</h6>
 *         <dt class="attribute-list__term">
 *           <span class="attribute__type">int</span>
 *           <span class="attribute__name">width</span>
 *         </dt>
 *         <dd class="attribute-list__description">
 *           <div class="attribute__description">
 *             <p>width in pixels. Resets to default size if falsy</p>
 *           </div>
 *         </dd>
 *       </dl>
 *     </dd>
 *   </dl>
 */
.attribute-list {
	padding: 0 1rem; }
	.attribute-list__title {
		font-size: 0.875rem;
		line-height: 1rem; }
	.attribute-list__description {
		margin-left: 2rem; }
		.attribute-list__description .attribute-list {
			padding: 0; }

/***
 * Organisms
 *
 * These are big things that combine everything smaller.  An entire form containing molecules of labels with inputs, or the global site header, for example.
 * > Organisms are groups of molecules joined together to form a relatively complex, distinct section of an interface.
 * >
 * >\- http://bradfrost.com/blog/post/atomic-web-design/#organisms
 */
/***
 *  Section
 *
 *  The main sections of the guide.  Modifiers would define variations.
 *
 *  html:
 *    <section class="section {{ modifier }}">
 *      <div class="section__inner">
 *        <header class="section__header">
 *          <h4>This is a Section</h4>
 *        </header>
 *        <div class="section__description"><p>The info here is <em>super</em> important!</p></div>
 *      </div>
 *    </section>
 *
 *  wrap: [style="background: #a99"]
 */
.section {
	margin: 8rem auto;
	position: relative;
	overflow: hidden; }
	.section--depth-1 {
		margin-top: 12rem; }

.section__inner {
	max-width: 65.75rem;
	margin-left: auto;
	margin-right: auto;
	padding: 0 1rem;
	margin: 0 auto;
	box-sizing: border-box; }
	.section--depth-2 .section__inner {
		padding-left: 2rem; }
	.section--depth-3 .section__inner {
		padding-left: 3rem; }
	.section--depth-4 .section__inner {
		padding-left: 4rem; }
	.section--depth-5 .section__inner {
		padding-left: 5rem; }

.section__sub-elements {
	position: relative;
	padding-top: 4rem;
	margin-top: 2rem; }
	.section__sub-elements::before {
		content: '';
		position: absolute;
		top: 0;
		bottom: 0;
		margin: 0 auto;
		width: 63.75rem;
		max-width: 100%;
		border-left: 1px solid #e9eaf0;
		transform: translateX(-50%);
		pointer-events: none; }
	.section__sub-elements > .section:first-child {
		margin-top: 0; }
	.section__sub-elements > .section:last-child {
		margin-bottom: 0; }
	.section__sub-elements .section__title::before {
		display: none; }
	.section--depth-1 .section__sub-elements::before {
		left: calc(50% + 0rem); }
	.section--depth-2 .section__sub-elements::before {
		left: calc(50% + 1rem); }
	.section--depth-3 .section__sub-elements::before {
		left: calc(50% + 2rem); }
	.section--depth-4 .section__sub-elements::before {
		left: calc(50% + 3rem); }
	.section--depth-5 .section__sub-elements::before {
		left: calc(50% + 4rem); }

.section__title {
	position: relative; }
	.section__title::before {
		position: absolute;
		right: 100%;
		top: 0;
		vertical-align: top;
		margin-right: 1rem; }
	.section__title:before {
		content: ""; }

.section__title--colors:before {
	content: ""; }

.section__title--fonts:before {
	content: ""; }

.section__title--quarks:before {
	content: ""; }

.section__title--atoms:before {
	content: ""; }

.section__title--molecules:before {
	content: ""; }

.section__title--organisms:before {
	content: ""; }

.section__title--settings:before {
	content: ""; }

.section__title--utilities:before {
	content: ""; }

.section__title--menu:before {
	content: ""; }

.section__title--phone:before {
	content: ""; }

.section__title--table:before {
	content: ""; }

.section__title--desktop:before {
	content: ""; }

/***
 * Main Header
 *
 * The main header of the styleguide.
 *
 * Makes use of `$background-header` and `$text-header` with the `super` sizing.
 * Background size is set to `cover` in case you want to override `$background-header`
 * with an image.
 *
 * html:
 *   <header class="header-main">
 *     <h1 class="header-main__title">Autoguide</h1>
 *   </header>
 *
 * fullWidth: true
 */
.header-main {
	padding: 12rem 2rem 3rem;
	background: #046C6F;
	background-size: cover; }
	.header-main__inner {
		margin: 0 auto;
		max-width: 63.75rem; }
	.header-main__title {
		font-size: 3.43rem;
		line-height: 4rem;
		font-family: "Droid Serif", serif;
		weight: 400;
		margin: 0;
		color: white; }
		@media only screen and (min-width: 45.625em) {
			.header-main__title {
				font-size: 4.802rem;
				line-height: 5rem; } }

/***
 * Main Footer
 *
 * Just a quick signoff.
 *
 * html:
 *    <footer class="footer-main">
 *      <p>Created using <a href="https://github.com/jhereg00/autoguide" target="_blank">Autoguide</a>.</p>
 *    </footer>
 *
 * fullWidth: true
 */
.footer-main {
	font-size: 0.875rem;
	line-height: 1rem;
	padding: 1rem 1rem;
	background: #66676a;
	color: white; }
	.footer-main a {
		text-decoration: underline;
		color: inherit; }

/***
 *  Controls
 *
 *  Buttons that handle certain guide-level features.
 *
 *  html:
 *    <div class="controls">
 *      <div class="controls__group controls__group--sample-size">
 *        <h5 class="controls__group-header">Sample Size</h5>
 *        <div class="input-text">
 *          <input type="number" name="sampleSize" id="sampleSize">
 *        </div>
 *        <div class="button-group">
 *          <button class="button button--small button--ison-phone button-group__button js-update-input" value="320">
 *            <span class="button__text">320px</span>
 *          </button>
 *          <button class="button button--small button--ison-tablet button-group__button js-update-input" value="768">
 *            <span class="button__text">768px</span>
 *          </button>
 *          <button class="button button--small button--ison-desktop button-group__button js-update-input" value="1200">
 *            <span class="button__text">1200px</span>
 *          </button>
 *          <button class="button button--small button-group__button js-update-input" value="">
 *            <span class="button__text">Default</span>
 *          </button>
 *        </div>
 *      </div>
 *    </div>
 */
.controls {
	padding: 1rem 1rem; }
	.controls__group + .controls__group {
		margin-top: 1rem;
		border-top: 1px solid #e9eaf0; }

/***
 *  Controls/Nav Tray
 *
 *  A fold-away thingy with tiers that can open/close.
 *
 *  html:
 *    <div class="tray">
 *      <div class="tray__tier">
 *        <a class="tray__opener"></a>
 *        <h4>Tier 1</h4>
 *      </div>
 *      <div class="tray__tier">
 *        <a class="tray__opener"></a>
 *        <h4>Tier 2</h4>
 *      </div>
 *    </div>
 *
 *  wrap: [style="height: 200px"]
 */
.tray {
	position: fixed;
	top: 0;
	left: 0;
	z-index: 9999999; }
	.tray + * {
		transition: margin-left 0.6s cubic-bezier(0.36, 0.01, 0.32, 0.99); }
	.tray.is-open + * {
		margin-left: 17rem; }
	.tray.is-open .tray__tier:not(.is-open) .tray__opener {
		left: 34rem; }

.tray__tier {
	position: absolute;
	top: 0;
	left: 0;
	bottom: 0;
	width: 17rem;
	box-sizing: border-box;
	background: #fff;
	border-right: 1px solid #e9eaf0;
	transition: transform 0.45s cubic-bezier(0.36, 0.01, 0.32, 0.99);
	z-index: 10;
	transform: translateX(-100%); }
	.tray__tier.is-open {
		transform: none; }
		.tray__tier.is-open > .tray__opener {
			text-indent: -0.25rem;
			-webkit-clip-path: polygon(1rem 0, 3rem 0, 3rem 1.5rem, 3rem 3rem, 1rem 3rem, 0 1.5rem);
			        clip-path: polygon(1rem 0, 3rem 0, 3rem 1.5rem, 3rem 3rem, 1rem 3rem, 0 1.5rem); }
			.tray__tier.is-open > .tray__opener::after {
				border-left-width: 0;
				border-right-width: calc(1rem + 1px); }
	.tray__tier:nth-child(2) .tray__opener {
		top: 5rem; }
	.tray__tier:nth-child(3) .tray__opener {
		top: 9rem; }
	.tray__tier:nth-child(4) .tray__opener {
		top: 13rem; }
	.tray__tier:nth-child(5) .tray__opener {
		top: 17rem; }

.tray__opener {
	font-size: 1.47903rem;
	line-height: 2rem;
	display: block;
	position: absolute;
	top: 1rem;
	left: 100%;
	width: 4rem;
	height: 3rem;
	box-sizing: border-box;
	margin-left: -1rem;
	line-height: 3rem;
	background: #fff;
	cursor: pointer;
	border: 1px solid #e9eaf0;
	border-width: 1px 0;
	color: rgba(51, 51, 51, 0.5);
	transition: color 0.15s;
	text-align: center;
	text-indent: 0.25rem;
	-webkit-clip-path: polygon(1rem 0, 3rem 0, 4rem 1.5rem, 3rem 3rem, 1rem 3rem, 1rem 1.5rem);
	        clip-path: polygon(1rem 0, 3rem 0, 4rem 1.5rem, 3rem 3rem, 1rem 3rem, 1rem 1.5rem);
	transition: text-indent 0.45s, left 0.45s, -webkit-clip-path 0.45s;
	transition: clip-path 0.45s, text-indent 0.45s, left 0.45s;
	transition: clip-path 0.45s, text-indent 0.45s, left 0.45s, -webkit-clip-path 0.45s; }
	.tray__opener:hover, .tray__tier.is-open .tray__opener {
		color: #333; }
	.tray__opener::before {
		content: '';
		position: absolute;
		top: 0;
		left: 1px;
		border-width: calc(1.5rem - 1px);
		border-right-width: calc(1rem - 1px);
		border-left-width: 1px;
		border-style: solid;
		border-color: #e9eaf0;
		border-right-color: transparent; }
	.tray__opener::after {
		content: '';
		position: absolute;
		top: 0;
		right: 0;
		border-width: calc(1.5rem - 1px);
		border-left-width: calc(1rem - 1px);
		border-right-width: 1px;
		border-style: solid;
		border-color: #e9eaf0;
		border-left-color: transparent;
		transition: border-width 0.15s; }

/***
 * Component
 *
 * An individual piece of the styleguide.
 *
 * html:
TODO
 */
.component {
	position: relative;
	padding: 6rem calc((100% - 63.75rem) / 2); }
	.component--depth-2 {
		padding-top: 4rem;
		padding-bottom: 4rem; }
	.component--depth-3 {
		padding-top: 2rem;
		padding-bottom: 2rem; }
	.component--depth-4 {
		padding-top: 2rem;
		padding-bottom: 2rem; }
	.component__header {
		position: relative;
		margin: 0 0 1rem; }
		.component__header .file-path {
			position: absolute;
			right: 0;
			bottom: 0.5rem; }
	.component__sub-elements > .component {
		padding-right: 0;
		padding-left: 2rem;
		margin: 0; }
		.component__sub-elements > .component:last-child {
			padding-bottom: 0; }
	.component--depth-1 {
		border-top: 1px solid #e9eaf0; }

/***
 * Palette
 *
 * Just a colection of [color](#/molecules/color) elements.  Sizes them mostly
 * based on how many are present.  This is achieved through the utterly ingenious
 * [mod selector](http://alistapart.com/article/using-css-mod-queries-with-range-selectors).
 *
 * Shows the colors as larger if in an element with 'primary' in its title.
 *
 * @modifier [id*="primary"] &
 *
 * html:
 *   <div class="palette">
 *     <div class="color color--dark">
 *       <div class="swatch swatch-- swatch--dark" style="background-color: #FF0000"></div>
 *       <div class="color__details">
 *         <span class="color__var-name" data-copy="$c1">$c1</span>
 *         <span class="color__value color__value--hex" data-copy="#FF0000">#FF0000</span>
 *       </div>
 *     </div>
 *     <div class="color color--dark">
 *       <div class="swatch swatch-- swatch--dark" style="background-color: #EE0000"></div>
 *       <div class="color__details">
 *         <span class="color__var-name" data-copy="$c2">$c2</span>
 *         <span class="color__value color__value--hex" data-copy="#EE0000">#EE0000</span>
 *       </div>
 *     </div>
 *     <div class="color color--dark">
 *       <div class="swatch swatch-- swatch--dark" style="background-color: #DD0000"></div>
 *       <div class="color__details">
 *         <span class="color__var-name" data-copy="$c3">$c3</span>
 *         <span class="color__value color__value--hex" data-copy="#DD0000">#DD0000</span>
 *       </div>
 *     </div>
 *     <div class="color color--dark">
 *       <div class="swatch swatch-- swatch--dark" style="background-color: #CC0000"></div>
 *       <div class="color__details">
 *         <span class="color__var-name" data-copy="$c4">$c4</span>
 *         <span class="color__value color__value--hex" data-copy="#CC0000">#CC0000</span>
 *       </div>
 *     </div>
 *   </div>
 */
.palette {
	max-width: 63.75rem;
	margin-left: auto;
	margin-right: auto; }
	.palette .color {
		float: left;
		width: 33.33333%; }
		.palette .color:nth-last-child(4n+0):first-child,
		.palette .color:nth-last-child(4n+0):first-child ~ .color {
			width: 25%; }
		.palette .color:nth-last-child(4n+3):first-child,
		.palette .color:nth-last-child(4n+3):first-child ~ .color {
			width: 25%; }
			.palette .color:nth-last-child(4n+3):first-child:nth-child(n+1):nth-child(-n+3),
			.palette .color:nth-last-child(4n+3):first-child ~ .color:nth-child(n+1):nth-child(-n+3) {
				width: 33.33333%; }
	[id*="primary"] .palette, [id*="brand"] .palette {
		font-size: 1.47903rem;
		line-height: 2rem; }
		[id*="primary"] .palette .color, [id*="brand"] .palette .color {
			width: 50%;
			height: 12rem; }
			[id*="primary"] .palette .color:nth-last-child(2n+1):first-child, [id*="brand"] .palette .color:nth-last-child(2n+1):first-child {
				width: 100%; }
			[id*="primary"] .palette .color:nth-last-child(3n+0):first-child,
			[id*="primary"] .palette .color:nth-last-child(3n+0):first-child ~ .color, [id*="brand"] .palette .color:nth-last-child(3n+0):first-child,
			[id*="brand"] .palette .color:nth-last-child(3n+0):first-child ~ .color {
				width: 33.33333%; }
			[id*="primary"] .palette .color:nth-last-child(3n+1):first-child,
			[id*="primary"] .palette .color:nth-last-child(3n+1):first-child ~ .color, [id*="brand"] .palette .color:nth-last-child(3n+1):first-child,
			[id*="brand"] .palette .color:nth-last-child(3n+1):first-child ~ .color {
				width: 33.33333%; }
			[id*="primary"] .palette .color:nth-last-child(3n+1):first-child, [id*="brand"] .palette .color:nth-last-child(3n+1):first-child {
				width: 100%; }
			[id*="primary"] .palette .color:nth-last-child(2n+0):first-child,
			[id*="primary"] .palette .color:nth-last-child(2n+0):first-child ~ .color, [id*="brand"] .palette .color:nth-last-child(2n+0):first-child,
			[id*="brand"] .palette .color:nth-last-child(2n+0):first-child ~ .color {
				width: 50%; }

/***
 * HTML Sample
 *
 * An output of a sample element/component.  It is turned into an iframe by
 * autoguide.js, allowing it to keep all of its styling localized.
 *
 * Title and description are optional based on the passed data.
 *
 * html:
 *   <div class="html-sample">
 *     <h6 class="html-sample__header">A Single Sample</h6>
 *     <div class="html-sample__description">
 *       <p>This is a sample of the sample. Neat, right?</p>
 *       <p>Side note, iframe can't be dynamically generated within dynamically generated iframe. It fucks up.</p>
 *     </div>
 *     <iframe class="html-sample__iframe" srcdoc='
 *       <html>
 *         <head>
 *           <link rel="stylesheet" href="assets/css/autoguide.css">
 *         </head>
 *         <body><h5>This is in an iframe</h5></body>
 *       </html>'>
 *     </iframe>
 *   </div>
 *
 * wrap: .component
 */
.html-sample__header--class-name {
	font-family: "Source Code Pro", monospace; }

.html-sample__description :first-child {
	margin-top: 0; }

.html-sample__iframe {
	border: 0.25rem solid #e9eaf0;
	width: calc(100% - 0.5rem);
	margin-left: 50%;
	transform: translateX(-50%); }

/**
 * outer page container
 */
.page-container {
	overflow: hidden; }

/**
 * Helper styles for js-collapsable
 */
.js-collapsable__toggle {
	cursor: pointer; }
	.js-collapsable__toggle::before {
		content: '+';
		float: right;
		font-weight: bold; }

.js-collapsable__content {
	overflow-y: hidden;
	height: 0;
	transition: height 0.3s cubic-bezier(0.36, 0.01, 0.32, 0.99); }

.js-collapsable.is-open .js-collapsable__toggle::before {
	content: '-'; }

/*# sourceMappingURL=data:application/json;base64, */
