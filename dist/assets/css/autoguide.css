@charset "UTF-8";
/***
 * Utilities
 *
 * Reusable functions, mixins, and helper classes.  Things like colors, vertical rhythm, and the .clear-fix helper are in this group.
 * > This directory of partials is also important because weâ€™ll need to define global classes, mixins and styles that can be used anywhere and at any time.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 * Strip Units
 *
 * Strips the units from a number
 *
 * code:
 *   stripUnits($number);
 *
 * @param $number - value to strip the units from.
 */
/***
 * Pixels to Rems function
 *
 * Converts pixels to REMs so we can keep our units consistent.  Assumes 1rem is 16px (default for most browsers).
 *
 * code:
 *   pxToRem($px[,$baseRem]);
 *
 * @param $px - unitless integer to convert to rems
 * @param $baseRem - pixels to count as one rem. Defaults to 16
 */
/***
 * Pixels to Ems function
 *
 * Converts pixels to EMs so we can keep our units consistent.  Assumes 1em is 16px, or you can pass a different base.
 *
 * code:
 *   pxToEm($px[,$base]);
 *
 * @param $px - unitless integer to convert to rems
 * @param $base - pixels to count as one em. Defaults to 16
 */
/***
 * Square Root Function
 *
 * Gets the square root of a number (within a margin of error)
 *
 * Useful for diagonal/Pythagorean stuff.
 *
 * code:
 *   sqrt($num)
 *
 * @param $num - number to get square root of
 */
/***
 * Power / Exponent Function
 *
 * Raises a number to a certain power. Supports integers and .5s as the exponent.
 *
 * Useful for diagonal/Pythagorean stuff.
 *
 * code:
 *   pow($base, $exponent)
 *
 * @param $base - number to get square root of
 * @param $exponent - exponent to raise the base number to
 */
/***
 * Aspect Ratio
 *
 * Gets padding for correct aspect ratio, and sets height to 0.
 *
 * code:
 *   @include aspect-ratio($width, $height)
 *
 * @param {Number} $width - comparative width of the ratio. The 'x' in x:y
 * @param {Number} $height - comparative height of the ratio. The 'y' in x:y
 */
/***
 * Quantity Query
 *
 * Mixins to allow styles to be set based on at-least, at-most, and exactly `n`
 * number of an element.
 *
 * code:
 *   @include qqAtLeast ($n) {
 *     @content;
 *   }
 *  
 *   @include qqAtMost ($n) {
 *     @content;
 *   }
 *  
 *   @include qqExactly ($n) {
 *     @content;
 *   }
 *
 * @param $n - how many elements to query against
 * @param @content - the styles to apply to it
 */
/***
 * Media Queries
 *
 * Defines our default breakpoints.  Assumes mobile-first code, but supports not
 * by passing your breakpoint to the alternate mixin: `mq-lt`. Don't worry about
 * having a ton of these, since the minification process will combine them.
 *
 * There's also a separate mixin each for `portrait` and `landscape` orientations.
 *
 * code:
 *   @include mq($breakpoint) {
 *     @content;
 *   }
 *   @include portrait {
 *     @content;
 *   }
 *   @include landscape {
 *     @content;
 *   }
 *
 * @param $breakpoint - what size you'd like to target larger than. A few have been pre-defined.
 * @param @content - the content to put in the media query
 */
/***
 *  Clear Fix
 *
 *  Clears all floats inside this element by using the `::after` pseudo-element.
 *
 *  code:
 *    @include clear-fix;
 *    // or
 *    @extend %clear-fix;
 */
@import 'https://fonts.googleapis.com/css?family=Lato:400,400i,700,700i|Source+Code+Pro:500|Source+Sans+Pro:900';
.ag-section::after, .ag-section__inner::after, .ag-header-main__inner::after {
	content: '';
	display: table;
	clear: both; }

/***
 * Grid
 *
 * Our super simple custom grid system. Just include the mixin `gridContainer`
 * to set max-width = $max-width + $gutter. For internal stuff, use
 * `subgridContainer` to automatically offset the margins on the container if
 * needed, and `colspan` on the actual column.  By default, assumes 12 columns
 * and a 2 * $wr gutter, but those can be overridden for more complex layouts.
 * It spits out styles wherever it is called, so you can define different
 * columns or even entirely different grids within media queries.
 *
 * There's also a colpush mixin to shift an element to the right by a number of columns.
 *
 * Remember, variables wrapped in `[]` in the example are optional.
 *
 * code:
 *   @include gridContainer ([$gutter]);
 *   @include subgridContainer ([$gutter]);
 *   @include colspan ($span[, $total[, $gutter]]);
 *   @include colpush ($span[, $total[, $gutter]]);
 *
 * @param {int} $span - number of columns to span
 * @param {int} $total - number of total columns the grid has
 * @param {number w/ unit} $gutter - width of the gutters between columns
 */
/*
* Hide only visually, but have it available for screen readers:
* http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
*/
.visuallyhidden, .toggle__checkbox {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	/*
  * Extends the .visuallyhidden class to allow the element
  * to be focusable when navigated to via the keyboard:
  * https://www.drupal.org/node/897638
  */ }
	.visuallyhidden.focusable:focus, .visuallyhidden.focusable:active, .focusable.toggle__checkbox:focus, .focusable.toggle__checkbox:active {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto; }

*, *::before, *::after {
	box-sizing: inherit; }

/**
 * Settings
 *
 * Global settings and variables. This defines global site wide things like
 * colors and fonts.
 */
/***
 *  Type Scale mixins
 *
 *  Created using [Gridlover](http://www.gridlover.net/try).  Values were size 16,
 *  line height 2, scale factor 1.5
 *
 *  code:
 *    @include h1;
 *    @include h2;
 *    @include h3;
 *    @include h4;
 *    @include body;
 *    @include small;
 */
/***
 * Quarks
 *
 * Element level styles meant to apply globally.  These define what elements look like if no class is applied to them.  Effectively our site specific _normalize.css_.
 * > Note that these files contain only the default styles for these elements, not modified elements. For example, if we have a table that looks and works entirely differently from the default tables used throughout the website, it would not be a quark.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
html {
	padding: 0;
	margin: 0;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale; }

body {
	font-family: "Lato", sans-serif;
	font-size: 1rem;
	line-height: 2rem;
	font-weight: 300;
	margin: 0;
	padding: 0;
	background: #fff;
	color: #333; }

/***
 * Typography
 *
 * Default text styles.
 *
 * html:
 *   <h1>Heading Level 1</h1>
 *   <h2>Heading Level 2</h2>
 *   <h3>Heading Level 3</h3>
 *   <h4>Heading Level 4</h4>
 *   <p>Unde quo, minus eaque eligendi cum tempore, nulla, accusamus est labore tenetur modi eveniet obcaecati voluptas eius vitae vero dolorem nobis culpa nihil. Itaque saepe suscipit odit fugit quidem culpa.</p>
 *   <p>Accusantium recusandae, dignissimos rerum quaerat voluptatem quis itaque deleniti sequi autem explicabo dolore delectus, doloremque eos. Accusantium<sup>sup</sup> recusandae<sub>sub</sub> eius, debitis voluptates adipisci aspernatur rem voluptatum, delectus, tempore accusantium dolorum cumque error.</p>
 */
h1, .h1 {
	font-size: 3.375rem;
	line-height: 4rem;
	font-family: "Source Sans Pro", sans-serif;
	margin: 0; }

h2, .h2 {
	font-size: 2.25rem;
	line-height: 3rem;
	font-family: "Source Sans Pro", sans-serif;
	margin: 0; }

h3, .h3 {
	font-size: 1.5rem;
	line-height: 2rem;
	font-family: "Source Sans Pro", sans-serif;
	margin: 0; }

h4, .h4 {
	font-size: 1.25rem;
	line-height: 2rem;
	font-family: "Source Sans Pro", sans-serif;
	margin: 0; }

p {
	margin: 1rem auto; }

strong {
	font-weight: 700; }

em {
	font-style: italic; }

/***
 * Links
 *
 * html:
 *   <a href="#">Simple Default Link</a>
 */
a {
	color: #046C6F;
	transition: color 0.15s;
	text-decoration: none;
	font-weight: 600; }
	a:hover {
		color: #11c1c4; }

/**
 *  Image Resets
 */
img {
	display: inline-block;
	max-width: 100%;
	border: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
	overflow: hidden; }

[src$='svg'] {
	width: auto;
	height: auto; }

/***
 * Horizontal Rule
 *
 * html:
 *   <hr>
 */
hr {
	display: block;
	width: auto;
	margin: 3rem 3rem;
	border: none;
	height: 1px;
	background: #e9eaf0; }
	@media only screen and (min-width: 45.625em) {
		hr {
			margin: 3rem 6rem; } }

/***
 *  Lists
 *
 *  html:
 *    <ul>
 *      <li>Lorem ipsum dolor sit amet</li>
 *      <li>Minima recusandae adipisci quidem</li>
 *      <li>Amet eum non animi soluta</li>
 *      <li>Saepe commodi nesciunt quaerat quae minima</li>
 *    </ul>
 *    <ol>
 *      <li>Lorem ipsum dolor sit amet</li>
 *      <li>Minima recusandae adipisci quidem</li>
 *      <li>Amet eum non animi soluta</li>
 *      <li>Saepe commodi nesciunt quaerat quae minima</li>
 *    </ol>
 */
ul, ol {
	margin: 2rem 0;
	padding-left: 2rem; }

li {
	margin: 1rem 0; }

/***
 * Blockquote
 *
 * Inset with a left border.
 *
 * html:
 *   <blockquote>
 *     <p>"Some content that's a quote."</p>
 *   </blockquote>
 */
blockquote {
	margin: 1rem 0;
	padding: 0 0 0 0.75rem;
	border-left: 0.25rem solid #e9eaf0; }

/***
 * Table
 *
 * html:
 *   <table>
 *     <tr>
 *       <th>Lorem</th>
 *       <td>Ipsum</td>
 *       <td>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Esse
 *          perspiciatis vitae sunt, magnam blanditiis unde velit quis perferendis
 *          iure ut excepturi tempora eos autem accusamus amet et, non? Distinctio,
 *          eaque.</td>
 *     </tr>
 *     <tr>
 *       <th>Sit</th>
 *       <td>Amet</td>
 *       <td>Lorem</td>
 *     </tr>
 *     <tr>
 *       <th>Ipsum</th>
 *       <td>Dolor</td>
 *       <td>Sit</td>
 *     </tr>
 *   </table>
 */
table {
	display: table;
	width: 100%;
	box-sizing: border-box;
	border-collapse: collapse; }

tr {
	border-top: 1px solid #e9eaf0;
	border-bottom: 1px solid #e9eaf0; }

th, td {
	text-align: left;
	padding: 0.5rem 1rem;
	vertical-align: top; }
	@media only screen and (max-width: 45.615em) {
		th, td {
			display: block; } }

/***
 *  Code
 *
 *  &lt;code&gt; elements. Uses `$font-mono`.
 *
 *  html:
 *    <code>this.is_some("code")</code>
 */
code {
	font-family: "Source Code Pro", monospace; }

/***
 * Atoms
 *
 * These are the smallest level of styles that merit a class.  Examples are buttons, icons, and text variations like disclaimers.
 * > The styles in an atom should almost never be attached to an HTML element itself; we might not be able to guarantee what the markup will look like in the future. Specifying a class instead is always safer.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 *  File Path
 *
 *  Light text showing where to find the element being described.
 *
 *  html:
 *    <p class="file-path">./dev/scss/super/_awesome-file.scss</p>
 */
.file-path {
	font-size: 0.875rem;
	line-height: 1.5rem;
	font-family: "Source Code Pro", monospace;
	margin: 0;
	color: rgba(33, 33, 33, 0.5); }

/***
 *  Color Swatch
 *
 *  The swatch samples near the beginning of the guide.
 *
 *  html:
 *    <div class="ag-swatch">
 *      <span class="ag-swatch__var-name">$color-name</span>
 *      <span class="ag-swatch__value">#abcdef</span>
 *    </div>
 *
 *  @default .ag-swatch--light
 *  @modifier .ag-swatch--dark - swap for light text on dark colors. Example color isn't particularly dark, though.
 */
.ag-swatch {
	box-sizing: border-box;
	float: left;
	min-height: 1px;
	width: 50%;
	margin-left: 0;
	margin-right: 0;
	position: relative;
	height: 6rem;
	overflow: hidden;
	background: #abcdef; }
	@media only screen and (min-width: 45.625em) {
		.ag-swatch {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: 33.33333%;
			margin-left: 0;
			margin-right: 0; } }
	@media only screen and (min-width: 60em) {
		.ag-swatch {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: 25%;
			margin-left: 0;
			margin-right: 0;
			height: 9rem; } }
	.ag-swatch--dark {
		color: #fff; }

.ag-swatch__var-name {
	font-family: "Source Code Pro", monospace;
	position: absolute;
	right: 1rem;
	bottom: 0;
	white-space: nowrap; }

.ag-swatch__value {
	font-family: "Source Sans Pro", sans-serif;
	position: absolute;
	right: .01em;
	bottom: 0;
	left: .01em;
	opacity: .25;
	font-size: 2.5rem;
	line-height: 1; }
	.ag-swatch__value--hex {
		right: 0;
		left: -0.5rem;
		bottom: -0.75rem;
		font-size: 4rem; }

/***
 *  Font Sample
 *
 *  Shows the first font found in the font stack of variables in a file named fonts.scss.
 *
 *  html:
 *    <div class="ag-font">
 *      <span class="ag-font__var-name">$my-font</span>
 *      <span class="ag-font__value" style="font-family: 'Times New Roman', serif;">
 *        Times New Roman
 *      </span>
 *    </div>
 */
.ag-font {
	box-sizing: border-box;
	float: left;
	min-height: 1px;
	width: calc(100% - 2rem);
	margin-left: 1rem;
	margin-right: 1rem;
	margin: 2rem auto; }
	@media only screen and (min-width: 45.625em) {
		.ag-font {
			box-sizing: border-box;
			float: left;
			min-height: 1px;
			width: calc(50% - 2rem);
			margin-left: 1rem;
			margin-right: 1rem; }
			.ag-font:nth-child(2n) {
				clear: left; } }

.ag-font__var-name {
	font-family: "Source Code Pro", monospace;
	display: block; }

.ag-font__value {
	font-size: 2.25rem;
	line-height: 3rem; }

/***
 *  Description
 *
 *  Container for the output of the markdown description for each element.
 *
 *  html:
 *    <div class="ag-description">
 *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Est non eum sit qui cum veniam optio deserunt, perspiciatis id eligendi sequi facere illum ad nobis soluta assumenda natus beatae molestiae.</p>
 *    </div>
 */
.ag-description {
	max-width: 49rem; }
	.ag-component-header + .ag-description > :first-child {
		margin-top: 0; }

/***
 *  Button
 *
 *  Basic button, and its variations.
 *
 *  @modifier .button--small
 *
 *  html:
 *    <a class="button">Click Here, Dummy</a>
 */
.button, .toggle__button {
	font-size: 1rem;
	line-height: 2rem;
	font-family: "Source Sans Pro", sans-serif;
	position: relative;
	display: inline-block;
	padding: 0.5rem 1rem;
	border: 1px solid #046C6F;
	border-radius: 0.25rem;
	cursor: pointer;
	transition: all .3s;
	color: #046C6F;
	background: #fff; }
	.button:hover, .toggle__button:hover {
		border-color: #11c1c4;
		box-shadow: inset 0 0 1rem rgba(4, 108, 111, 0.25);
		color: #11c1c4; }

.button--small {
	font-size: 0.875rem;
	line-height: 1.5rem;
	padding: 0.25rem 0.5rem; }

/***
 *  Toggle
 *
 *  A button that stays active based on a hidden checkbox. Class extends
 *  [button](#/atoms/button).
 *
 *  html:
 *    <div class="toggle">
 *      <input type="checkbox" id="sample" class="toggle__checkbox">
 *      <label for="sample" class="toggle__button">I Toggle</label>
 *    </div>
 */
.toggle {
	display: inline-block; }

.toggle__checkbox:checked ~ .toggle__button {
	background: #e9eaf0; }

/***
 *  Component Header
 *
 *  Small header for identifying components.
 *
 *  html:
 *    <h4 class="ag-component-header">See Below</h4>
 */
.ag-component-header {
	margin: 2rem 0 0; }

/***
 * Molecules
 *
 * Structures which combine multiple elements to create a coherent piece. A masthead with an image and headline, or a nav dropdown containing numerous links, for example.
 * > This is where we can combine multiple quarks and atoms, without interfering with any of our global styles.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 *  Component
 *
 *  Each individual bit of crap to display.
 *
 *  @modifier .ag-component--html
 *  @modifier .ag-component--code
 *
 *  html:
 *    <div class="ag-component">
 *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus, velit, est! Perspiciatis consectetur non eos sequi, mollitia porro recusandae voluptatem, eum aliquam possimus a dolorum saepe pariatur repudiandae in nobis.</p>
 *    </div>
 */
.ag-component--html {
	display: block;
	width: 100%;
	max-width: 62.5rem;
	border: 0.25rem solid #e9eaf0;
	margin: 1rem auto;
	box-sizing: content-box;
	background: #fff; }
	.ag-component--html.fs:not(.resized) {
		max-width: 100%;
		margin: 1rem auto;
		border-width: 0.25rem 0; }

.ag-component--code {
	display: none;
	background: #e9eaf0;
	margin: 0 -1rem;
	padding: 1rem 1rem;
	overflow: auto; }
	.show-dev .ag-component--code {
		display: block; }

/***
 *  Parameter Description
 *
 *  Describes a parameter included using `@param {type} name - description`.
 *
 *  html:
 *    <div class="ag-param">
 *      <span class="ag-param__type">object</span>
 *      <span class="ag-param__name">myVar</span>
 *      <div class="ag-param__description ag-description">Makes the function do something awesome.</div>
 *    </div>
 */
.ag-param {
	padding-left: 1rem; }
	.ag-param + .ag-param {
		margin-top: 1rem; }
	.ag-param .ag-param {
		padding-left: 2rem; }

.ag-param__type {
	font-family: "Source Code Pro", monospace;
	color: rgba(33, 33, 33, 0.5);
	margin-right: 1rem; }

.ag-param__name {
	font-family: "Source Code Pro", monospace;
	font-weight: 700; }

.ag-param__description {
	padding-left: 1rem; }
	.ag-param__description > :first-child {
		margin-top: 0; }
	.ag-param__description > :last-child {
		margin-bottom: 0; }

/***
 *  Main Nav
 *
 *  html:
 *    <nav class="ag-nav-main ag-tray__tier open">
 *      <a class="ag-nav-main__opener ag-tray__tier-opener"><span class="visuallyhidden">Open Controls</span></a>
 *      <ul class="ag-nav-main__list">
 *        <li class="ag-nav-main__item"><a class="ag-nav-main__link" href="#/colors">Colors</a></li>
 *        <li class="ag-nav-main__item"><a class="ag-nav-main__link" href="#/fonts">Fonts</a></li>
 *        <li class="ag-nav-main__item">
 *          <a href="#/quarks" class="ag-nav-main__link">Quarks</a>
 *          <ul class="ag-nav-main__subnav">
 *            <li class="ag-nav-main__item">
 *              <a href="#/quarks/blockquote" class="ag-nav-main__link">Blockquote</a>
 *            </li>
 *            <li class="ag-nav-main__item">
 *              <a href="#/quarks/code" class="ag-nav-main__link">Code</a>
 *            </li>
 *          </ul>
 *        </li>
 *        <li class="ag-nav-main__item">
 *          <a href="#/atoms" class="ag-nav-main__link">Atoms</a>
 *        </li>
 *      </ul>
 *    </nav>
 */
.ag-nav-main.ag-tray__tier {
	padding: 0 1rem; }

.ag-nav-main__list {
	margin: 0;
	padding: 1rem 0;
	list-style-type: none;
	max-height: 100%;
	overflow: auto; }

.ag-nav-main__item {
	margin: 0; }

.ag-nav-main__subnav {
	margin: 0;
	padding: 0;
	list-style-type: none; }
	.ag-nav-main__subnav .ag-nav-main__link {
		padding-left: 3rem; }
	.ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__link {
		padding-left: 4rem; }
	.ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__link {
		padding-left: 5rem; }
	.ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__link {
		padding-left: 6rem; }
	.ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__subnav .ag-nav-main__link {
		padding-left: 7rem; }

.ag-nav-main__link {
	display: block;
	padding-left: 2rem; }

/***
 * Organisms
 *
 * These are big things that combine everything smaller.  An entire form containing molecules of labels with inputs, or the global site header, for example.
 * > Organisms are groups of molecules joined together to form a relatively complex, distinct section of an interface.
 * >
 * >\- http://bradfrost.com/blog/post/atomic-web-design/#organisms
 */
/***
 *  Section
 *
 *  The main sections of the guide.  Modifiers would define variations.
 *
 *  html:
 *    <section class="ag-section {{ modifier }}">
 *      <div class="ag-section__inner">
 *        <header class="ag-section__header">
 *          <h4>This is a Section</h4>
 *        </header>
 *        <div class="ag-section__description"><p>The info here is <em>super</em> important!</p></div>
 *      </div>
 *    </section>
 */
.ag-section {
	margin: 8rem auto;
	position: relative;
	overflow: hidden; }
	.ag-section--depth-1 {
		margin-top: 12rem; }

.ag-section__inner {
	max-width: 62rem;
	margin-left: auto;
	margin-right: auto;
	padding: 0 1rem;
	margin: 0 auto;
	box-sizing: border-box; }
	.ag-section--depth-2 .ag-section__inner {
		padding-left: 2rem; }
	.ag-section--depth-3 .ag-section__inner {
		padding-left: 3rem; }
	.ag-section--depth-4 .ag-section__inner {
		padding-left: 4rem; }
	.ag-section--depth-5 .ag-section__inner {
		padding-left: 5rem; }

.ag-section__sub-elements {
	position: relative;
	padding-top: 4rem;
	margin-top: 2rem; }
	.ag-section__sub-elements::before {
		content: '';
		position: absolute;
		top: 0;
		bottom: 0;
		margin: 0 auto;
		width: 60rem;
		max-width: 100%;
		border-left: 1px solid #e9eaf0;
		transform: translateX(-50%);
		pointer-events: none; }
	.ag-section__sub-elements > .ag-section:first-child {
		margin-top: 0; }
	.ag-section__sub-elements > .ag-section:last-child {
		margin-bottom: 0; }
	.ag-section--depth-1 .ag-section__sub-elements::before {
		left: calc(50% + 0rem); }
	.ag-section--depth-2 .ag-section__sub-elements::before {
		left: calc(50% + 1rem); }
	.ag-section--depth-3 .ag-section__sub-elements::before {
		left: calc(50% + 2rem); }
	.ag-section--depth-4 .ag-section__sub-elements::before {
		left: calc(50% + 3rem); }
	.ag-section--depth-5 .ag-section__sub-elements::before {
		left: calc(50% + 4rem); }

/***
 *  Main Header
 *
 *  Simple fixed header with the controls.
 *
 *  html:
 *    <header class="ag-header-main">
 *      <div class="ag-header-main__inner">
 *        <h1 class="ag-header-main__title">Styleguide</h1>
 *      </div>
 *    </header>
 */
.ag-header-main {
	background: #fff;
	padding: 5rem 0 2rem;
	top: 0;
	right: 0;
	left: 0;
	z-index: 8675309;
	background: linear-gradient(to bottom left, #11c1c4, #0b979a 25%, #046C6F 80%);
	color: #fff; }

.ag-header-main__inner {
	max-width: 62rem;
	margin-left: auto;
	margin-right: auto; }

.ag-header-main__title {
	font-size: 3.375rem;
	line-height: 4rem;
	box-sizing: border-box;
	float: left;
	min-height: 1px;
	width: calc(100% - 2rem);
	margin-left: 1rem;
	margin-right: 1rem; }
	@media only screen and (min-width: 45.625em) {
		.ag-header-main__title {
			font-size: 5.0625rem;
			line-height: 6rem; } }

/***
 *  Main Footer
 *
 *  Just a quick signoff.
 *
 *  html:
 *    <footer class="footer-main">
 *      <p>Created using <a href="https://github.com/jhereg00/autoguide" target="_blank">Autoguide</a>.</p>
 *    </footer>
 */
.footer-main {
	font-size: 0.875rem;
	line-height: 1.5rem;
	padding: 1rem 1rem;
	margin-top: 8rem;
	background: #66676a;
	color: #fff; }
	.footer-main a {
		text-decoration: underline;
		color: inherit; }

/***
 *  Controls/Nav Tray
 *
 *  A fold-away thingy with tiers that can open/close.
 *
 *  html:
 *    <div class="ag-tray">
 *      <div class="ag-tray__tier">
 *        <a class="ag-tray__tier-opener"></a>
 *        <h4>Tier 1</h4>
 *      </div>
 *      <div class="ag-tray__tier">
 *        <a class="ag-tray__tier-opener"></a>
 *        <h4>Tier 2</h4>
 *      </div>
 *    </div>
 */
.ag-tray {
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	pointer-events: none;
	z-index: 9999999;
	transition: background .3s; }
	.ag-tray.open {
		background: rgba(4, 108, 111, 0.5);
		pointer-events: auto; }
		.ag-tray.open > .ag-tray__tiers-container {
			-webkit-filter: drop-shadow(0 0 0.5rem rgba(4, 108, 111, 0.8));
			        filter: drop-shadow(0 0 0.5rem rgba(4, 108, 111, 0.8)); }

.ag-tray__tier {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	width: 80vw;
	padding: 1rem 1rem;
	box-sizing: border-box;
	background: #e9eaf0;
	pointer-events: auto;
	transform: translateX(100%);
	transition: transform .3s, right .3s;
	z-index: 10; }
	@media only screen and (min-width: 45.625em) {
		.ag-tray__tier {
			width: 33vw; } }
	@media only screen and (min-width: 60em) {
		.ag-tray__tier {
			width: 20vw; } }
	.ag-tray__tier.open {
		transform: none; }
	.ag-tray__tier:nth-child(2) {
		z-index: 8;
		background: #d1d3df; }
		.ag-tray__tier:nth-child(2) .ag-tray__tier-opener {
			top: 2rem; }
	@media only screen and (min-width: 45.625em) {
		.ag-tray__tier.open + .ag-tray__tier {
			right: 33vw; } }
	@media only screen and (min-width: 60em) {
		.ag-tray__tier.open + .ag-tray__tier {
			right: 20vw; } }
	.ag-tray__tier:nth-child(3) {
		z-index: 7;
		background: #b8bccf; }
		.ag-tray__tier:nth-child(3) .ag-tray__tier-opener {
			top: 4rem; }
	@media only screen and (min-width: 45.625em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 66vw; } }
	@media only screen and (min-width: 60em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 40vw; } }
	.ag-tray__tier:nth-child(4) {
		z-index: 6;
		background: #a0a5be; }
		.ag-tray__tier:nth-child(4) .ag-tray__tier-opener {
			top: 6rem; }
	@media only screen and (min-width: 45.625em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 99vw; } }
	@media only screen and (min-width: 60em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 60vw; } }
	.ag-tray__tier:nth-child(5) {
		z-index: 5;
		background: #888dae; }
		.ag-tray__tier:nth-child(5) .ag-tray__tier-opener {
			top: 8rem; }
	@media only screen and (min-width: 45.625em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 132vw; } }
	@media only screen and (min-width: 60em) {
		.ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier.open + .ag-tray__tier {
			right: 80vw; } }

.ag-tray__tier-opener {
	display: block;
	position: absolute;
	top: 0;
	right: 100%;
	width: 2rem;
	height: 2rem;
	background: inherit;
	cursor: pointer;
	color: rgba(33, 33, 33, 0.5);
	transition: color .3s; }
	.ag-tray__tier-opener:hover, .ag-tray__tier.open .ag-tray__tier-opener {
		color: #333; }

/**
 * .dev-only defines if an element should only show when dev view is enabled
 */
.dev-only {
	display: none; }
	.show-dev .dev-only {
		display: block; }

/*# sourceMappingURL=data:application/json;base64, */
