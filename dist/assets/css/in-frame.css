@charset "UTF-8";
/**
 *  Extra styles to add inside iframes
 */
/**
  * Utilities
  *
  * Reusable functions, mixins, and helper classes.  Things like colors, vertical rhythm, and the .clear-fix helper are in this group.
  * > This directory of partials is also important because weâ€™ll need to define global classes, mixins and styles that can be used anywhere and at any time.
  * >
  * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
  */
/***
 * Aspect Ratio
 *
 * Gets padding for correct aspect ratio, and sets height to 0.
 *
 * code:
 *   @include aspect-ratio($width, $height)
 *
 * @param {Number} $width - comparative width of the ratio. The 'x' in x:y
 * @param {Number} $height - comparative height of the ratio. The 'y' in x:y
 */
/***
 *  Clear Fix
 *
 *  Clears all floats inside this element by using the `::after` pseudo-element.
 *
 *  code:
 *    @include clear-fix;
 *    // or
 *    @extend %clear-fix;
 */
body::after {
	content: '';
	display: table;
	clear: both; }

/***
 * Grid
 *
 * Our super simple custom grid system. Just include the mixin `gridContainer`
 * to set max-width = $max-width + $gutter. For internal stuff, use
 * `subgridContainer` to automatically offset the margins on the container if
 * needed, and `colspan` on the actual column.  By default, assumes 12 columns
 * and a 2 * $wr gutter, but those can be overridden for more complex layouts.
 * It spits out styles wherever it is called, so you can define different
 * columns or even entirely different grids within media queries.
 *
 * There's also a colpush mixin to shift an element to the right by a number of columns.
 *
 * Remember, variables wrapped in `[]` in the example are optional.
 *
 * code:
 *   @include gridContainer ([$gutter]);
 *   @include subgridContainer ([$gutter]);
 *   @include colspan ($span[, $total[, $gutter]]);
 *   @include colpush ($span[, $total[, $gutter]]);
 *
 * @param {int} $span - number of columns to span
 * @param {int} $total - number of total columns the grid has
 * @param {number w/ unit} $gutter - width of the gutters between columns
 */
/**
  * Settings
  *
  * Global settings and variables. This defines global site wide things like
  * colors and fonts.
  */
html:not(.fs) body {
	padding: 1rem 1rem; }

.show-grid body::before {
	content: '';
	position: fixed;
	top: 0;
	bottom: 0;
	left: 50%;
	width: 100%;
	max-width: 60rem;
	z-index: 8675309;
	transform: translateX(-50%);
	background-image: linear-gradient(to right, transparent 1rem, rgba(17, 193, 196, 0.1) 1rem, rgba(17, 193, 196, 0.1) calc(100% - 1rem), transparent calc(100% - 1rem));
	background-size: 8.33333% auto; }

/*# sourceMappingURL=data:application/json;base64, */
